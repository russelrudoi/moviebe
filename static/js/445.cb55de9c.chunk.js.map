{"version":3,"file":"static/js/445.cb55de9c.chunk.js","mappings":"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","sources":["components/pages/SeriesPage.js","components/series/Series.js","components/templateListItem/TemplateListItem.js","components/templateListSwiper/TemplateListSwiper.js","components/templatePageList/TemplatePageList.js","utils/changeUrlImage.js"],"sourcesContent":["import Series from \"../series/Series\"\r\n\r\nconst SeriesPage = () => {\r\n    return <Series/>\r\n}\r\n\r\nexport default SeriesPage","import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { fetchSeries } from \"./seriesSlice\";\r\n\r\nimport TemplateListSwiper from \"../templateListSwiper/TemplateListSwiper\";\r\nimport TemplatePageList from \"../templatePageList/TemplatePageList\";\r\n\r\nconst Series = () => {\r\n    const { pathname } = useLocation()\r\n    const { series, seriesLoadingStatus } = useSelector(state => state.series);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchSeries())\r\n    }, [])\r\n\r\n    if (pathname === '/moviebe/') {\r\n        return <TemplateListSwiper\r\n            data={series}\r\n            title={'Series'}\r\n            loadingStatus={seriesLoadingStatus}\r\n            linkPage={'/moviebe/series'} />\r\n    }\r\n\r\n    if (pathname === '/moviebe/series') {\r\n        return <TemplatePageList items={series} loadingStatus={seriesLoadingStatus} />\r\n    }\r\n}\r\n\r\nexport default Series;","import { useState, useEffect } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\nimport changeUrlImage from '../../utils/changeUrlImage';\r\nimport Spinner from \"../spinner/Spinner\";\r\n\r\nimport 'swiper/css/lazy';\r\nimport './templateListItem.scss'\r\n\r\nconst TemplateListItem = ({ title, year, image, id, imDbRating }) => {\r\n    const [imageLoaded, setImageLoaded] = useState(false)\r\n    const [widthViewport, setWidthViewport] = useState(0);\r\n    const { pathname } = useLocation()\r\n    const changedImage = changeUrlImage(image);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"resize\", resizeHandler);\r\n        resizeHandler();\r\n        return () => {\r\n            window.removeEventListener(\"resize\", resizeHandler);\r\n        };\r\n    }, [])\r\n\r\n    const resizeHandler = () => {\r\n        setWidthViewport(window.innerWidth);\r\n    };\r\n\r\n    const handleImageLoaded = () => {\r\n        setImageLoaded(true)\r\n    };\r\n\r\n    const imageClass = classNames({\r\n        'template__image_loading': !imageLoaded\r\n    })\r\n\r\n    if (pathname === '/moviebe/' || pathname === `/moviebe/${id}`) {\r\n        return (\r\n            // to={`${widthViewport > 1024 ? `/moviebe/${id}` : ''}`}\r\n            <Link to={`/moviebe/${id}`}>\r\n                <div className='template__image' >\r\n                    <img\r\n                        className='swiper-lazy'\r\n                        data-srcset={changedImage}\r\n                        loading='lazy'\r\n                        alt='' />\r\n                    <div className='template__image__overlay'>\r\n                        <Link to={`/moviebe/${id}`}>\r\n                            <button className='template__image__btn'>watch</button>\r\n                        </Link>\r\n                        <span>\r\n                            <div className=\"template__image__rating\">IMDB: <span>{imDbRating}</span></div>\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"swiper-lazy-preloader swiper-lazy-preloader-white\"></div>\r\n                </div>\r\n\r\n                <h2 className=\"template__title\">{title}</h2>\r\n                <div className=\"template__year\">{year}</div>\r\n            </Link>\r\n        )\r\n    } else {\r\n        return (\r\n            <Link to={`/moviebe/${id}`}>\r\n                <div className='template__image'>\r\n                    <img className={`${imageClass}`} src={changedImage} alt=\"movies\" onLoad={handleImageLoaded} />\r\n                    <div className='template__image__overlay'>\r\n                        <Link to={`/moviebe/${id}`}>\r\n                            <button className='template__image__btn'>watch</button>\r\n                        </Link>\r\n                        <span>\r\n                            <div className=\"template__image__rating\">IMDB: <span>{imDbRating}</span></div>\r\n                        </span>\r\n                    </div>\r\n                    {\r\n                        !imageLoaded\r\n                            ? <Spinner />\r\n                            : null\r\n                    }\r\n                </div>\r\n\r\n                <h2 className=\"template__title\">{title}</h2>\r\n                <div className=\"template__year\">{year}</div>\r\n            </Link>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TemplateListItem;","import { Link } from 'react-router-dom';\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport { Keyboard, Navigation, Mousewheel, Lazy } from \"swiper\";\r\nimport TemplateListItem from '../templateListItem/TemplateListItem';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorIcon from '../../resources/img/icon/error.png';\r\n\r\nimport \"swiper/css\";\r\nimport './templateListSwiper.scss';\r\n\r\nconst TemplateListSwiper = ({ data, title, loadingStatus, linkPage, withoutLink }) => {\r\n\r\n    if (loadingStatus === 'loading') {\r\n        return (\r\n            <div className=\"template-swiper\">\r\n                <h2 className=\"title\">\r\n                    {title}\r\n                </h2>\r\n                <div className=\"spinner\">\r\n                    <Spinner />\r\n                </div>\r\n            </div>\r\n        )\r\n    } else if (loadingStatus === 'error') {\r\n        return (\r\n            <div className=\"template-swiper\">\r\n                <h2 className=\"title\">\r\n                    {title}\r\n                </h2>\r\n                <div className=\"eror\">\r\n                    <img src={ErrorIcon} alt=\"\" />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderTemplateList = (arr) => {\r\n        return arr.map(({ id, ...props }, index) => {\r\n            if (index <= 30) {\r\n                return (\r\n                    <SwiperSlide className=\"template__item\" key={id}>\r\n                        <TemplateListItem {...props} id={id} />\r\n                    </SwiperSlide>\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    const elements = renderTemplateList(data)\r\n\r\n    return (\r\n        <div className=\"template-swiper\">\r\n            {withoutLink ?\r\n                <h2 className=\"title\">\r\n                    {title}\r\n                </h2>\r\n                :\r\n                <h2 className=\"title\">\r\n                    {title} <Link to={linkPage}>see more...</Link>\r\n                </h2>\r\n            }\r\n            <Swiper\r\n                modules={[Navigation, Mousewheel, Keyboard, Lazy]}\r\n                lazy={true}\r\n                pagination={{\r\n                    clickable: true,\r\n                }}\r\n                slidesPerView={2}\r\n                spaceBetween={5}\r\n                navigation={true}\r\n                mousewheel={true}\r\n                keyboard={true}\r\n                breakpoints={{\r\n                    576: {\r\n                        slidesPerView: 3,\r\n                    },\r\n                    768: {\r\n                        slidesPerView: 4,\r\n                        spaceBetween: 15,\r\n                    },\r\n                    991: {\r\n                        slidesPerView: 5,\r\n                        spaceBetween: 15,\r\n\r\n                    },\r\n                    1140: {\r\n                        slidesPerView: 6,\r\n                        spaceBetween: 15,\r\n                    },\r\n                }}\r\n                className=\"mySwiper\">\r\n                {elements}\r\n            </Swiper>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TemplateListSwiper","import { useEffect, useState } from \"react\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport TemplateListItem from \"../templateListItem/TemplateListItem\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorIcon from '../../resources/img/icon/error.png';\r\n\r\nimport './templatePageList.scss';\r\n\r\nconst Items = ({ currentItems }) => {\r\n    const renderItems = (arr) => {\r\n        return arr.map(({ id, ...props }, index) => {\r\n            if (index <= 50) {\r\n                return (\r\n                    <div className=\"template__item\" key={id}>\r\n                        <TemplateListItem {...props} id={id} />\r\n                    </div>\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    const elements = renderItems(currentItems)\r\n\r\n    return (\r\n        <div className=\"template-page__wrapper\">\r\n            {elements}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst TemplatePageList = ({ items, loadingStatus }) => {\r\n\r\n    const [currentItems, setCurrentItems] = useState([]);\r\n    const [pageCount, setPageCount] = useState(0);\r\n    const [itemOffset, setItemOffset] = useState(0);\r\n\r\n    const itemsPerPage = 48;\r\n\r\n    useEffect(() => {\r\n        changePage();\r\n    }, [items])\r\n\r\n    useEffect(() => {\r\n        changePage();\r\n        window.scrollTo(0, 0);\r\n    }, [itemOffset, itemsPerPage]);\r\n\r\n    if (loadingStatus === 'loading') {\r\n        return (\r\n            <div className=\"spinner spinner-page\">\r\n                <Spinner />\r\n            </div>\r\n        )\r\n    } else if (loadingStatus === 'error') {\r\n        return (\r\n            <div className=\"error error-page\">\r\n                <img src={ErrorIcon} alt=\"\" />\r\n                Error\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const changePage = () => {\r\n        const endOffset = itemOffset + itemsPerPage;\r\n        setCurrentItems(items.slice(itemOffset, endOffset));\r\n        setPageCount(Math.ceil(items.length / itemsPerPage));\r\n    }\r\n\r\n    const handlePageClick = (event) => {\r\n        const newOffset = event.selected * itemsPerPage % items.length;\r\n        setItemOffset(newOffset);\r\n    };\r\n\r\n    return (\r\n        <div className=\"template-page\">\r\n            <Items currentItems={currentItems} />\r\n            <div className=\"template-page__pagination-wrapper\">\r\n                <ReactPaginate\r\n                    nextLabel=\">\"\r\n                    onPageChange={handlePageClick}\r\n                    pageRangeDisplayed={3}\r\n                    marginPagesDisplayed={2}\r\n                    pageCount={pageCount}\r\n                    previousLabel=\"<\"\r\n                    pageClassName=\"page-item\"\r\n                    pageLinkClassName=\"page-link\"\r\n                    previousClassName=\"page-item\"\r\n                    previousLinkClassName=\"page-link\"\r\n                    nextClassName=\"page-item\"\r\n                    nextLinkClassName=\"page-link\"\r\n                    breakLabel=\"...\"\r\n                    breakClassName=\"page-item\"\r\n                    breakLinkClassName=\"page-link\"\r\n                    containerClassName=\"pagination\"\r\n                    activeClassName=\"page-item_active\"\r\n                    renderOnZeroPageCount={null}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default TemplatePageList;\r\n","const changeUrlImage = (url) => {\r\n    const endIndex = url.indexOf('._');\r\n    const changedUrl = `${url.slice(0, endIndex)}._V1_Ratio0.6716_AL_.jpg`;\r\n    \r\n    return changedUrl\r\n}\r\n\r\nexport default changeUrlImage"],"names":["pathname","useLocation","useSelector","state","series","seriesLoadingStatus","dispatch","useDispatch","useEffect","fetchSeries","data","title","loadingStatus","linkPage","items","year","image","id","imDbRating","useState","imageLoaded","setImageLoaded","setWidthViewport","changedImage","changeUrlImage","window","addEventListener","resizeHandler","removeEventListener","innerWidth","imageClass","classNames","to","className","loading","alt","src","onLoad","Spinner","withoutLink","ErrorIcon","elements","map","index","props","TemplateListItem","modules","Navigation","Mousewheel","Keyboard","Lazy","lazy","pagination","clickable","slidesPerView","spaceBetween","navigation","mousewheel","keyboard","breakpoints","Items","currentItems","setCurrentItems","pageCount","setPageCount","itemOffset","setItemOffset","changePage","scrollTo","endOffset","slice","Math","ceil","length","nextLabel","onPageChange","event","newOffset","selected","pageRangeDisplayed","marginPagesDisplayed","previousLabel","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakLabel","breakClassName","breakLinkClassName","containerClassName","activeClassName","renderOnZeroPageCount","url","endIndex","indexOf"],"sourceRoot":""}