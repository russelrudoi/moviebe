{"version":3,"file":"static/js/785.1c400d76.chunk.js","mappings":"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","sources":["components/comingSoon/ComingSoon.js","components/inTheatersList/inTheatersListItem/InTheatersListItem.js","components/inTheatersList/InTheatersList.js","components/inTheaters/InTheaters.js","components/movies/Movies.js","components/promo/Promo.js","components/pages/MainPage.js","components/series/Series.js","components/templateListItem/TemplateListItem.js","components/templateListSwiper/TemplateListSwiper.js","components/templatePageList/TemplatePageList.js","utils/changeUrlImage.js"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useLocation } from \"react-router-dom\";\r\nimport TemplateListSwiper from \"../templateListSwiper/TemplateListSwiper\"\r\nimport TemplatePageList from \"../templatePageList/TemplatePageList\";\r\nimport { fetchComingSoon } from \"./comingSoonSlice\";\r\n\r\n\r\nconst ComingSoon = () => {\r\n    const { pathname } = useLocation()\r\n    const { comingSoon, comingSoonLoadingStatus } = useSelector(state => state.comingSoon);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchComingSoon())\r\n    }, [])\r\n\r\n    if (pathname === '/moviebe/') {\r\n        return <TemplateListSwiper\r\n            data={comingSoon}\r\n            title={'Coming Soon'}\r\n            loadingStatus={comingSoonLoadingStatus}\r\n            linkPage={'/moviebe/comingsoon'} />\r\n    }\r\n\r\n    if (pathname === '/moviebe/comingsoon') {\r\n        return <TemplatePageList items={comingSoon} loadingStatus={comingSoonLoadingStatus} />\r\n    }\r\n}\r\n\r\nexport default ComingSoon","import { useState } from 'react';\r\nimport classNames from \"classnames\";\r\nimport changeUrlImage from \"../../../utils/changeUrlImage\";\r\nimport Spinner from \"../../spinner/Spinner\";\r\n\r\nimport './inTheatersListItem.scss'\r\nimport { Link } from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\n\r\nconst InTheatersListItem = ({ id, title, year, plot, image, imDbRating, metacriticRating, index }) => {\r\n    const [imageLoaded, setImageLoaded] = useState(false);\r\n    const [widthViewport, setWidthViewport] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setWidthViewport(widthViewport => widthViewport = window.innerWidth)\r\n    }, [])\r\n\r\n    const handleImageLoaded = () => {\r\n        setImageLoaded(true)\r\n    };\r\n\r\n    const imageClass = classNames({\r\n        'in-theaters__image_loading': !imageLoaded\r\n    })\r\n\r\n\r\n\r\n    const itemSizeClass = classNames(\r\n        'in-theaters__item',\r\n        {\r\n            'in-theaters__big': index === 0 && widthViewport > 1140,\r\n            'in-theaters__small': index === 1 || (index === 0 && widthViewport < 1140) || index === 3,\r\n            'in-theaters__small second': index === 2\r\n        }\r\n    )\r\n\r\n    const changedImage = changeUrlImage(image)\r\n\r\n    return (\r\n        <div className={itemSizeClass}>\r\n            <img\r\n                className={`${imageClass}`}\r\n                src={changedImage}\r\n                alt=\"in theaters\"\r\n                onLoad={handleImageLoaded} />\r\n            {\r\n                !imageLoaded\r\n                    ? <Spinner />\r\n                    : null\r\n            }\r\n            <div className=\"in-theaters__info\">\r\n                <h2 className=\"in-theaters__title\">{title}</h2>\r\n                <div className=\"in-theaters__year\">{year}</div>\r\n                <p className=\"in-theaters__plot\">{plot}</p>\r\n                <div className=\"in-theaters__ratings\">\r\n                    <div className=\"in-theaters__ratings-name\">\r\n                        IMDB:<span>{imDbRating}</span>\r\n                    </div>\r\n                    <div className=\"in-theaters__ratings-name\">\r\n                        MC:<span>{metacriticRating}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Link to={`/moviebe/${id}`}>\r\n                <button className=\"btn in-theaters__btn-watch\">\r\n                    watch\r\n                </button>\r\n            </Link>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default InTheatersListItem","import { Link } from 'react-router-dom';\r\nimport InTheatersListItem from './inTheatersListItem/InTheatersListItem';\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorIcon from '../../resources/img/icon/error.png';\r\n\r\nimport '../../style/style.scss';\r\nimport './inTheatersList.scss';\r\n\r\nconst InTheatersList = ({ inTheaters, inTheatersLoadingStatus }) => {\r\n\r\n    if (inTheatersLoadingStatus === 'loading') {\r\n        return (\r\n            <div className=\"in-theaters\">\r\n                <h2 className=\"title\">In theaters</h2>\r\n                <div className=\"spinner\">\r\n                    <Spinner />\r\n                </div>\r\n            </div>\r\n        )\r\n    } else if (inTheatersLoadingStatus === 'error') {\r\n        return (\r\n            <div className=\"in-theaters\">\r\n                <h2 className=\"title\">In theaters</h2>\r\n                <div className=\"error\">\r\n                    <img src={ErrorIcon} alt=\"\" />\r\n                    Error\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderList = (arr) => {\r\n        let amountMovie = 3;\r\n        \r\n        if (window.innerWidth <= 768) {\r\n            amountMovie = 4\r\n        }\r\n        return arr.map(({ id, ...props }, index) => {\r\n            if (index < amountMovie) {\r\n                return (\r\n                    <InTheatersListItem\r\n                        key={id}\r\n                        index={index}\r\n                        id={id}\r\n                        {...props}\r\n                    />\r\n                )\r\n            } \r\n        })\r\n    }\r\n\r\n    const elements = renderList(inTheaters)\r\n\r\n    return (\r\n        <div className=\"in-theaters\">\r\n            <h2 className=\"title\">In theaters <Link to='/moviebe/intheatre'>see more...</Link></h2>\r\n            <div className=\"in-theaters__wrapper\">\r\n                {elements}\r\n                <Link to='/moviebe/intheaters'>\r\n                    <button className=\"btn in-theaters__btn-link\">see more</button>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InTheatersList;","import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { fetchInTheaters } from './inTheatersSlice';\r\nimport InTheatersList from '../inTheatersList/InTheatersList';\r\nimport TemplatePageList from \"../templatePageList/TemplatePageList\";\r\n\r\nconst InTheaters = () => {\r\n    const { pathname } = useLocation();\r\n    const { inTheaters, inTheatersLoadingStatus } = useSelector(state => state.inTheaters)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchInTheaters());\r\n    }, [])\r\n\r\n    if (pathname === '/moviebe/') {\r\n        return <InTheatersList\r\n            inTheaters={inTheaters}\r\n            inTheatersLoadingStatus={inTheatersLoadingStatus}\r\n        />\r\n    }\r\n\r\n    if (pathname === '/moviebe/intheaters') {\r\n        return <TemplatePageList items={inTheaters} inTheatersLoadingStatus={inTheatersLoadingStatus} />\r\n    }\r\n}\r\n\r\nexport default InTheaters","import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation } from 'react-router-dom';\r\nimport TemplateListSwiper from '../templateListSwiper/TemplateListSwiper';\r\nimport TemplatePageList from '../templatePageList/TemplatePageList';\r\n\r\nimport { fetchMovies } from './moviesSlice';\r\n\r\nconst Movies = () => {\r\n    const { pathname } = useLocation()\r\n    const { movies, moviesLoadingStatus } = useSelector(state => state.movies)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchMovies());\r\n    }, [])\r\n\r\n    if (pathname === '/moviebe/') {\r\n        return <TemplateListSwiper\r\n            data={movies}\r\n            title={'Movies'}\r\n            loadingStatus={moviesLoadingStatus}\r\n            linkPage={'/moviebe/movies'} />\r\n\r\n    }\r\n\r\n    if (pathname === '/moviebe/movies') {\r\n        return <TemplatePageList items={movies} loadingStatus={moviesLoadingStatus} />\r\n    }\r\n}\r\n\r\nexport default Movies;","import { useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport changeUrlImage from '../../utils/changeUrlImage';\r\n\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorIcon from '../../resources/img/icon/error.png';\r\nimport BackgroundImg from '../../resources/img/background.jpg'\r\n\r\nimport './promo.scss'\r\n\r\nconst Promo = () => {\r\n    const { inTheaters: promo, inTheatersLoadingStatus: promoLoadingStatus } = useSelector(state => state.inTheaters);\r\n\r\n    if (promoLoadingStatus === 'loading') {\r\n        return (\r\n            <div className=\"promo\">\r\n                <div className=\"spinner\">\r\n                    <Spinner />\r\n                </div>\r\n                <div className=\"promo__bg\"></div>\r\n            </div>\r\n        )\r\n    } else if (promoLoadingStatus === 'error') {\r\n        return (\r\n            <div className=\"promo\">\r\n                <div className=\"error\">\r\n                    <img src={ErrorIcon} alt=\"\" />\r\n                    Error\r\n                </div>\r\n                <div className=\"promo__bg\"></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderPromo = (arr) => {\r\n        const random = (min, max) => {\r\n            return Math.floor(Math.random() * (max - min + 1)) + min;\r\n        }\r\n\r\n        if (arr.length) {\r\n            const { id, title, fullTitle, plot, imDbRating, metacriticRating, image } = arr[random(3, arr.length)]\r\n\r\n            return (\r\n                <>\r\n                    <div className=\"promo__info\">\r\n                        <h1 className=\"promo__title\">{title}</h1>\r\n                        <div className=\"promo__original-title\">{fullTitle}</div>\r\n                        <p className=\"promo__description\">\r\n                            {plot}\r\n                        </p>\r\n                        <div className=\"promo__ratings\">\r\n                            <div className=\"promo__ratings-name\">\r\n                                IMDB:<span>{imDbRating}</span>\r\n                            </div>\r\n                            <div className=\"promo__ratings-name\">\r\n                                MC:<span>{metacriticRating}</span>\r\n                            </div>\r\n                        </div>\r\n                        <Link to={`/moviebe/${id}`}>\r\n                            <button className=\"btn promo__btn\">more details</button>\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"promo__img\">\r\n                        <img src={changeUrlImage(image)} alt=\"movies\" />\r\n                    </div>\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    const element = renderPromo(promo)\r\n\r\n    return (\r\n        <div className=\"promo\">\r\n            {element}\r\n            <img className=\"promo__bg\" src={BackgroundImg}/>\r\n            <div className=\"promo__bg_overlay\"></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Promo","import Promo from '../promo/Promo';\r\nimport InTheaters from '../inTheaters/InTheaters';\r\nimport ComingSoon from '../comingSoon/ComingSoon';\r\nimport Movies from '../movies/Movies';\r\nimport Series from '../series/Series';\r\n\r\nconst MainPage = () => {\r\n    return (\r\n        <>\r\n            <Promo />\r\n            <InTheaters />\r\n            <ComingSoon />\r\n            <Movies />\r\n            <Series />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage","import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { fetchSeries } from \"./seriesSlice\";\r\n\r\nimport TemplateListSwiper from \"../templateListSwiper/TemplateListSwiper\";\r\nimport TemplatePageList from \"../templatePageList/TemplatePageList\";\r\n\r\nconst Series = () => {\r\n    const { pathname } = useLocation()\r\n    const { series, seriesLoadingStatus } = useSelector(state => state.series);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchSeries())\r\n    }, [])\r\n\r\n    if (pathname === '/moviebe/') {\r\n        return <TemplateListSwiper\r\n            data={series}\r\n            title={'Series'}\r\n            loadingStatus={seriesLoadingStatus}\r\n            linkPage={'/moviebe/series'} />\r\n    }\r\n\r\n    if (pathname === '/moviebe/series') {\r\n        return <TemplatePageList items={series} loadingStatus={seriesLoadingStatus} />\r\n    }\r\n}\r\n\r\nexport default Series;","import { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\nimport changeUrlImage from '../../utils/changeUrlImage'\r\nimport Spinner from \"../spinner/Spinner\";\r\n\r\nimport './templateListItem.scss'\r\n\r\nconst TemplateListItem = ({ title, year, image, id, imDbRating }) => {\r\n    const [imageLoaded, setImageLoaded] = useState(false)\r\n    const changedImage = changeUrlImage(image)\r\n\r\n    const handleImageLoaded = () => {\r\n        setImageLoaded(true)\r\n    };\r\n\r\n    const imageClass = classNames({\r\n        'template__image_loading': !imageLoaded\r\n    })\r\n\r\n    const handleClick = () => {\r\n        console.log(title, year, id)\r\n    }\r\n\r\n    return (\r\n        <Link to={`/moviebe/${id}`} onClick={handleClick}>\r\n            <div className='template__image'>\r\n                <img className={`${imageClass}`} src={changedImage} alt=\"movies\" onLoad={handleImageLoaded} />\r\n                <button className='template__image__btn'>watch</button>\r\n                <div className=\"template__image__rating\">IMDB: <span>{imDbRating}</span></div>\r\n                {\r\n                    !imageLoaded\r\n                        ? <Spinner />\r\n                        : null\r\n                }\r\n                <div className={`template__image_overlay ${imageClass}`}></div>\r\n            </div>\r\n\r\n            <h2 className=\"template__title\">{title}</h2>\r\n            <div className=\"template__year\">{year}</div>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default TemplateListItem;","import { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport { Keyboard, Navigation, Mousewheel } from \"swiper\";\r\nimport TemplateListItem from '../templateListItem/TemplateListItem';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorIcon from '../../resources/img/icon/error.png';\r\n\r\nimport \"swiper/css\";\r\nimport './templateListSwiper.scss';\r\n\r\nconst TemplateListSwiper = ({ data, title, loadingStatus, linkPage, withoutLink }) => {\r\n\r\n    const [widthViewport, setWidthViewport] = useState(0);\r\n    const [slidesPerView, setSlidesPerView] = useState(6);\r\n    const [spaceBetweenSlides, setSpaceBetweenSlides] = useState(15);\r\n\r\n    useEffect(() => {\r\n        setWidthViewport(widthViewport => widthViewport = window.innerWidth);\r\n        handlerViewport()\r\n    }, [])\r\n\r\n    const handlerViewport = () => {\r\n        console.log(widthViewport)\r\n        if (widthViewport <= 576) {\r\n            setSlidesPerView(2)\r\n            setSpaceBetweenSlides(5)\r\n            return\r\n        }\r\n        if (widthViewport <= 768) {\r\n            setSlidesPerView(3)\r\n            setSpaceBetweenSlides(5)\r\n            return\r\n        }\r\n        if (widthViewport <= 991) {\r\n            setSlidesPerView(4)\r\n            return\r\n        }\r\n\r\n        if (widthViewport <= 1140) {\r\n            setSlidesPerView(5)\r\n            return\r\n        }\r\n\r\n\r\n    }\r\n\r\n    if (loadingStatus === 'loading') {\r\n        return (\r\n            <div className=\"template-swiper\">\r\n                <h2 className=\"title\">\r\n                    {title}\r\n                </h2>\r\n                <div className=\"spinner\">\r\n                    <Spinner />\r\n                </div>\r\n            </div>\r\n        )\r\n    } else if (loadingStatus === 'error') {\r\n        return (\r\n            <div className=\"template-swiper\">\r\n                <h2 className=\"title\">\r\n                    {title}\r\n                </h2>\r\n                <div className=\"eror\">\r\n                    <img src={ErrorIcon} alt=\"\" />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderTemplateList = (arr) => {\r\n        return arr.map(({ id, ...props }, index) => {\r\n            if (index <= 30) {\r\n                return (\r\n                    <SwiperSlide className=\"template__item\" key={id}>\r\n                        <TemplateListItem {...props} id={id} />\r\n                    </SwiperSlide>\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    const elements = renderTemplateList(data)\r\n\r\n    return (\r\n        <div className=\"template-swiper\">\r\n            {withoutLink ?\r\n                <h2 className=\"title\">\r\n                    {title}\r\n                </h2>\r\n                :\r\n                <h2 className=\"title\">\r\n                    {title} <Link to={linkPage}>see more...</Link>\r\n                </h2>\r\n            }\r\n            <Swiper\r\n                modules={[Navigation, Mousewheel, Keyboard]}\r\n                pagination={{\r\n                    clickable: true,\r\n                }}\r\n                slidesPerView={slidesPerView}\r\n                spaceBetween={spaceBetweenSlides}\r\n                navigation={true}\r\n                mousewheel={true}\r\n                keyboard={true}\r\n                className=\"mySwiper\">\r\n                {elements}\r\n            </Swiper>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TemplateListSwiper","import { useEffect, useState } from \"react\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport TemplateListItem from \"../templateListItem/TemplateListItem\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorIcon from '../../resources/img/icon/error.png';\r\n\r\nimport './templatePageList.scss';\r\n\r\nconst Items = ({ currentItems }) => {\r\n    const renderItems = (arr) => {\r\n        return arr.map(({ id, ...props }, index) => {\r\n            if (index <= 50) {\r\n                return (\r\n                    <div className=\"template__item\" key={id}>\r\n                        <TemplateListItem {...props} id={id}/>\r\n                    </div>\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    const elements = renderItems(currentItems)\r\n\r\n    return (\r\n        <div className=\"template-page__wrapper\">\r\n            {elements}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst TemplatePageList = ({ items, loadingStatus }) => {\r\n\r\n    const [currentItems, setCurrentItems] = useState([]);\r\n    const [pageCount, setPageCount] = useState(0);\r\n    const [itemOffset, setItemOffset] = useState(0);\r\n\r\n    const itemsPerPage = 48;\r\n\r\n    useEffect(() => {\r\n        changePage();\r\n    }, [items])\r\n\r\n    useEffect(() => {\r\n        changePage();\r\n        window.scrollTo(0, 0);\r\n    }, [itemOffset, itemsPerPage]);\r\n\r\n    if (loadingStatus === 'loading') {\r\n        return (\r\n            <div className=\"spinner spinner-page\">\r\n                <Spinner />\r\n            </div>\r\n        )\r\n    } else if (loadingStatus === 'error') {\r\n        return (\r\n            <div className=\"error error-page\">\r\n                <img src={ErrorIcon} alt=\"\" />\r\n                Error\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const changePage = () => {\r\n        const endOffset = itemOffset + itemsPerPage;\r\n        setCurrentItems(items.slice(itemOffset, endOffset));\r\n        setPageCount(Math.ceil(items.length / itemsPerPage));\r\n    }\r\n\r\n    const handlePageClick = (event) => {\r\n        const newOffset = event.selected * itemsPerPage % items.length;\r\n        setItemOffset(newOffset);\r\n    };\r\n\r\n    return (\r\n        <div className=\"template-page\">\r\n            <div className=\"container\">\r\n                <Items currentItems={currentItems} />\r\n                <div className=\"template-page__pagination-wrapper\">\r\n                    <ReactPaginate\r\n                        nextLabel=\">\"\r\n                        onPageChange={handlePageClick}\r\n                        pageRangeDisplayed={3}\r\n                        marginPagesDisplayed={2}\r\n                        pageCount={pageCount}\r\n                        previousLabel=\"<\"\r\n                        pageClassName=\"page-item\"\r\n                        pageLinkClassName=\"page-link\"\r\n                        previousClassName=\"page-item\"\r\n                        previousLinkClassName=\"page-link\"\r\n                        nextClassName=\"page-item\"\r\n                        nextLinkClassName=\"page-link\"\r\n                        breakLabel=\"...\"\r\n                        breakClassName=\"page-item\"\r\n                        breakLinkClassName=\"page-link\"\r\n                        containerClassName=\"pagination\"\r\n                        activeClassName=\"page-item_active\"\r\n                        renderOnZeroPageCount={null}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default TemplatePageList;\r\n","const changeUrlImage = (url) => {\r\n    const endIndex = url.indexOf('._');\r\n    const changedUrl = `${url.slice(0, endIndex)}._V1_Ratio0.6716_AL_.jpg`;\r\n    \r\n    return changedUrl\r\n}\r\n\r\nexport default changeUrlImage"],"names":["pathname","useLocation","useSelector","state","comingSoon","comingSoonLoadingStatus","dispatch","useDispatch","useEffect","fetchComingSoon","data","title","loadingStatus","linkPage","items","id","year","plot","image","imDbRating","metacriticRating","index","useState","imageLoaded","setImageLoaded","widthViewport","setWidthViewport","window","innerWidth","imageClass","classNames","itemSizeClass","changedImage","changeUrlImage","className","src","alt","onLoad","Spinner","to","inTheaters","inTheatersLoadingStatus","ErrorIcon","elements","arr","amountMovie","map","props","renderList","fetchInTheaters","TemplatePageList","movies","moviesLoadingStatus","fetchMovies","promo","promoLoadingStatus","element","min","max","length","Math","floor","random","fullTitle","renderPromo","BackgroundImg","InTheaters","ComingSoon","Movies","Series","series","seriesLoadingStatus","fetchSeries","onClick","console","log","withoutLink","slidesPerView","setSlidesPerView","spaceBetweenSlides","setSpaceBetweenSlides","handlerViewport","TemplateListItem","modules","Navigation","Mousewheel","Keyboard","pagination","clickable","spaceBetween","navigation","mousewheel","keyboard","Items","currentItems","setCurrentItems","pageCount","setPageCount","itemOffset","setItemOffset","changePage","scrollTo","endOffset","slice","ceil","nextLabel","onPageChange","event","newOffset","selected","pageRangeDisplayed","marginPagesDisplayed","previousLabel","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakLabel","breakClassName","breakLinkClassName","containerClassName","activeClassName","renderOnZeroPageCount","url","endIndex","indexOf"],"sourceRoot":""}