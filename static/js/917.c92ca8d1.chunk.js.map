{"version":3,"file":"static/js/917.c92ca8d1.chunk.js","mappings":"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","sources":["components/pages/SeriesPage.js","components/series/Series.js","components/templateListItem/TemplateListItem.js","components/templateListSwiper/TemplateListSwiper.js","components/templatePageList/TemplatePageList.js","utils/changeUrlImage.js"],"sourcesContent":["import Series from \"../series/Series\"\r\n\r\nconst SeriesPage = () => {\r\n    return <Series/>\r\n}\r\n\r\nexport default SeriesPage","import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { fetchSeries } from \"./seriesSlice\";\r\n\r\nimport TemplateListSwiper from \"../templateListSwiper/TemplateListSwiper\"\r\nimport TemplatePageList from \"../templatePageList/TemplatePageList\";\r\n\r\nconst Series = () => {\r\n    const { pathname } = useLocation()\r\n    const { series, seriesLoadingStatus } = useSelector(state => state.series);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchSeries())\r\n    }, [])\r\n\r\n    if (pathname === '/moviebe/') {\r\n        return <TemplateListSwiper\r\n            data={series}\r\n            title={'Series'}\r\n            loadingStatus={seriesLoadingStatus}\r\n            linkPage={'/moviebe/series'} />\r\n    }\r\n\r\n    if (pathname === '/moviebe/series') {\r\n        return <TemplatePageList items={series} loadingStatus={seriesLoadingStatus} />\r\n    }\r\n}\r\n\r\nexport default Series;","import { useState } from 'react';\r\nimport classNames from 'classnames';\r\nimport changeUrlImage from '../../utils/changeUrlImage'\r\nimport Spinner from \"../spinner/Spinner\";\r\n\r\nimport './templateListItem.scss'\r\n\r\nconst TemplateListItem = ({ title, year, image }) => {\r\n    const [imageLoaded, setImageLoaded] = useState(false)\r\n    const changedImage = changeUrlImage(image)\r\n\r\n    const handleImageLoaded = () => {\r\n        setImageLoaded(true)\r\n    };\r\n\r\n    const imageClass = classNames({\r\n        'template__image_loading': !imageLoaded\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <div className='template__image'>\r\n                <img className={`${imageClass}`} src={changedImage} alt=\"movies\" onLoad={handleImageLoaded} />\r\n                {\r\n                    !imageLoaded\r\n                        ? <Spinner />\r\n                        : null\r\n                }\r\n            </div>\r\n            <h2 className=\"template__title\">{title}</h2>\r\n            <div className=\"template__year\">({year})</div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TemplateListItem;","import TemplateListItem from '../templateListItem/TemplateListItem';\r\nimport { Link } from 'react-router-dom';\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport { Keyboard, Navigation, Mousewheel } from \"swiper\";\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorIcon from '../../resources/img/icon/error.png';\r\n\r\nimport \"swiper/css\";\r\nimport './templateListSwiper.scss';\r\n\r\nconst TemplateListSwiper = ({ data, title, loadingStatus, linkPage }) => {\r\n\r\n    if (loadingStatus === 'loading') {\r\n        return (\r\n            <div className=\"template-swiper\">\r\n                <div className=\"container\">\r\n                    <h2 className=\"title\">\r\n                        {title}\r\n                    </h2>\r\n                    <div className=\"spinner\">\r\n                        <Spinner />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else if (loadingStatus === 'error') {\r\n        return (\r\n            <div className=\"template-swiper\">\r\n                <div className=\"container\">\r\n                    <h2 className=\"title\">\r\n                        {title}\r\n                    </h2>\r\n                    <div className=\"eror\">\r\n                        <img src={ErrorIcon} alt=\"\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderTemplateList = (arr) => {\r\n        return arr.map(({ id, ...props }, index) => {\r\n            if (index <= 30) {\r\n                return (\r\n                    <SwiperSlide className=\"template__item\" key={id}>\r\n                        <TemplateListItem {...props} />\r\n                    </SwiperSlide>\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    const elements = renderTemplateList(data)\r\n\r\n    return (\r\n        <div className=\"template-swiper\">\r\n            <div className=\"container\">\r\n                <h2 className=\"title\">\r\n                    {title} <Link to={linkPage}>see more...</Link>\r\n                </h2>\r\n                <Swiper\r\n                    modules={[Navigation, Mousewheel, Keyboard]}\r\n                    pagination={{\r\n                        clickable: true,\r\n                    }}\r\n                    slidesPerView={6}\r\n                    spaceBetween={15}\r\n                    navigation={true}\r\n                    mousewheel={true}\r\n                    keyboard={true}\r\n                    className=\"mySwiper\">\r\n                    {elements}\r\n                </Swiper>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TemplateListSwiper","import { useEffect, useState } from \"react\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport TemplateListItem from \"../templateListItem/TemplateListItem\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorIcon from '../../resources/img/icon/error.png';\r\n\r\nimport './templatePageList.scss';\r\n\r\nconst Items = ({ currentItems }) => {\r\n    const renderItems = (arr) => {\r\n        return arr.map(({ id, ...props }, index) => {\r\n            if (index <= 50) {\r\n                return (\r\n                    <div className=\"template__item\" key={id}>\r\n                        <TemplateListItem {...props} />\r\n                    </div>\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    const elements = renderItems(currentItems)\r\n\r\n    return (\r\n        <div className=\"template-page__wrapper\">\r\n            {elements}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst TemplatePageList = ({ items, loadingStatus }) => {\r\n\r\n    const [currentItems, setCurrentItems] = useState([]);\r\n    const [pageCount, setPageCount] = useState(0);\r\n    const [itemOffset, setItemOffset] = useState(0);\r\n\r\n    const itemsPerPage = 48;\r\n\r\n    useEffect(() => {\r\n        changePage();\r\n    }, [items])\r\n\r\n    useEffect(() => {\r\n        changePage();\r\n        window.scrollTo(0, 0);\r\n    }, [itemOffset, itemsPerPage]);\r\n\r\n    if (loadingStatus === 'loading') {\r\n        return (\r\n            <div className=\"spinner spinner-page\">\r\n                <Spinner />\r\n            </div>\r\n        )\r\n    } else if (loadingStatus === 'error') {\r\n        return (\r\n            <div className=\"error error-page\">\r\n                <img src={ErrorIcon} alt=\"\" />\r\n                Error\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const changePage = () => {\r\n        const endOffset = itemOffset + itemsPerPage;\r\n        setCurrentItems(items.slice(itemOffset, endOffset));\r\n        setPageCount(Math.ceil(items.length / itemsPerPage));\r\n    }\r\n\r\n    const handlePageClick = (event) => {\r\n        const newOffset = event.selected * itemsPerPage % items.length;\r\n        setItemOffset(newOffset);\r\n    };\r\n\r\n    return (\r\n        <div className=\"template-page\">\r\n            <div className=\"container\">\r\n                <Items currentItems={currentItems} />\r\n                <div className=\"template-page__pagination-wrapper\">\r\n                    <ReactPaginate\r\n                        nextLabel=\">\"\r\n                        onPageChange={handlePageClick}\r\n                        pageRangeDisplayed={3}\r\n                        marginPagesDisplayed={2}\r\n                        pageCount={pageCount}\r\n                        previousLabel=\"<\"\r\n                        pageClassName=\"page-item\"\r\n                        pageLinkClassName=\"page-link\"\r\n                        previousClassName=\"page-item\"\r\n                        previousLinkClassName=\"page-link\"\r\n                        nextClassName=\"page-item\"\r\n                        nextLinkClassName=\"page-link\"\r\n                        breakLabel=\"...\"\r\n                        breakClassName=\"page-item\"\r\n                        breakLinkClassName=\"page-link\"\r\n                        containerClassName=\"pagination\"\r\n                        activeClassName=\"page-item_active\"\r\n                        renderOnZeroPageCount={null}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default TemplatePageList;\r\n","const changeUrlImage = (url) => {\r\n    const endIndex = url.indexOf('._');\r\n    const changedUrl = `${url.slice(0, endIndex)}._V1_Ratio0.6716_AL_.jpg`;\r\n    \r\n    return changedUrl\r\n}\r\n\r\nexport default changeUrlImage"],"names":["pathname","useLocation","useSelector","state","series","seriesLoadingStatus","dispatch","useDispatch","useEffect","fetchSeries","data","title","loadingStatus","linkPage","items","year","image","useState","imageLoaded","setImageLoaded","changedImage","changeUrlImage","imageClass","classNames","className","src","alt","onLoad","Spinner","ErrorIcon","elements","map","index","id","props","TemplateListItem","to","modules","Navigation","Mousewheel","Keyboard","pagination","clickable","slidesPerView","spaceBetween","navigation","mousewheel","keyboard","Items","currentItems","setCurrentItems","pageCount","setPageCount","itemOffset","setItemOffset","changePage","window","scrollTo","endOffset","slice","Math","ceil","length","nextLabel","onPageChange","event","newOffset","selected","pageRangeDisplayed","marginPagesDisplayed","previousLabel","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakLabel","breakClassName","breakLinkClassName","containerClassName","activeClassName","renderOnZeroPageCount","url","endIndex","indexOf"],"sourceRoot":""}