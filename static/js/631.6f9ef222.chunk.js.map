{"version":3,"file":"static/js/631.6f9ef222.chunk.js","mappings":"2QA4DA,EArD2B,SAAH,GAA2E,IAArEA,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAMC,EAAI,EAAJA,KAAMC,EAAK,EAALA,MAAOC,EAAU,EAAVA,WAAYC,EAAgB,EAAhBA,iBAAkBC,EAAK,EAALA,MAClF,GAAsCC,EAAAA,EAAAA,WAAS,GAAM,eAA9CC,EAAW,KAAEC,EAAc,KAM5BC,EAAaC,IAAW,CAC1B,8BAA+BH,IAG7BI,EAAgBD,IAClB,oBACA,CAAE,mBAA8B,IAAVL,GACtB,CAAE,qBAAgC,IAAVA,GACxB,CAAE,4BAAuC,IAAVA,IAG7BO,GAAeC,EAAAA,EAAAA,GAAeX,GAEpC,OACI,iBAAKY,UAAWH,EAAc,WAC1B,gBACIG,UAAS,UAAKL,GACdM,IAAKH,EACLI,IAAI,cACJC,OAvBc,WACtBT,GAAe,EACnB,IAuBaD,EAEK,MADA,SAACW,EAAA,EAAO,KAGlB,iBAAKJ,UAAU,oBAAmB,WAC9B,eAAIA,UAAU,qBAAoB,SAAEf,KACpC,gBAAKe,UAAU,oBAAmB,SAAEd,KACpC,cAAGc,UAAU,oBAAmB,SAAEb,KAClC,iBAAKa,UAAU,uBAAsB,WACjC,iBAAKA,UAAU,4BAA2B,mBACjC,0BAAOX,QAEhB,iBAAKW,UAAU,4BAA2B,iBACnC,0BAAOV,cAItB,mBAAQU,UAAU,6BAA4B,qBAM1D,E,6BCMA,EAxDuB,SAAH,GAA+C,IAA1CK,EAAU,EAAVA,WAAYC,EAAuB,EAAvBA,wBAEjC,GAAgC,YAA5BA,EACA,OACI,gBAAKN,UAAU,cAAa,UACxB,iBAAKA,UAAU,YAAW,WACtB,eAAIA,UAAU,QAAO,0BACrB,gBAAKA,UAAU,UAAS,UACpB,SAACI,EAAA,EAAO,WAKrB,GAAgC,UAA5BE,EACP,OACI,gBAAKN,UAAU,cAAa,UACxB,iBAAKA,UAAU,YAAW,WACtB,eAAIA,UAAU,QAAO,0BACrB,iBAAKA,UAAU,QAAO,WAClB,gBAAKC,IAAKM,EAAWL,IAAI,KAAK,gBAQlD,IAcMM,EAAsBH,EAbbI,KAAI,WAAmBlB,GAAW,IAA3BmB,EAAE,EAAFA,GAAOC,GAAK,YAC1B,GAAIpB,EAAQ,EACR,OACI,SAAC,GAAkB,QAEfA,MAAOA,GACHoB,GAFCD,EAMrB,IAKJ,OACI,gBAAKV,UAAU,cAAa,UACxB,iBAAKA,UAAU,YAAW,WACtB,gBAAIA,UAAU,QAAO,0BAAa,SAAC,KAAI,CAACY,GAAG,qBAAoB,6BAC/D,iBAAKZ,UAAU,uBAAsB,UAChCQ,GACD,mBAAQR,UAAU,4BAA2B,6BAKjE,E,UClCA,EArBmB,WACf,IAAQa,GAAaC,EAAAA,EAAAA,MAAbD,SACR,GAAgDE,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMX,UAAU,IAA7EA,EAAU,EAAVA,WAAYC,EAAuB,EAAvBA,wBACdW,GAAWC,EAAAA,EAAAA,MAMjB,OAJAC,EAAAA,EAAAA,YAAU,WACNF,GAASG,EAAAA,EAAAA,KACb,GAAG,IAEc,cAAbP,GACO,SAAC,EAAc,CAClBR,WAAYA,EACZC,wBAAyBA,IAIhB,wBAAbO,GACO,SAACQ,EAAA,EAAgB,CAACC,MAAOjB,EAAYC,wBAAyBA,SADzE,CAGJ,C,qDCpBA,UAJuB,WACnB,OAAO,SAAC,IAAU,GACtB,C,+HC+BA,EA5ByB,SAAH,GAAgC,IAA1BrB,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAME,EAAK,EAALA,MACrC,GAAsCI,EAAAA,EAAAA,WAAS,GAAM,eAA9CC,EAAW,KAAEC,EAAc,KAC5BI,GAAeC,EAAAA,EAAAA,GAAeX,GAM9BO,EAAaC,IAAW,CAC1B,yBAA4BH,IAGhC,OACI,iCACI,iBAAKO,UAAU,kBAAiB,WAC5B,gBAAKA,UAAS,UAAKL,GAAcM,IAAKH,EAAcI,IAAI,SAASC,OAXnD,WACtBT,GAAe,EACnB,IAWiBD,EAEK,MADA,SAACW,EAAA,EAAO,QAItB,eAAIJ,UAAU,kBAAiB,SAAEf,KACjC,iBAAKe,UAAU,iBAAgB,cAAGd,EAAI,SAGlD,C,sKCzBMqC,EAAQ,SAAH,GAA0B,IAApBC,EAAY,EAAZA,aAaPhB,EAAuBgB,EAXdf,KAAI,WAAmBlB,GAAW,IAA3BmB,EAAE,EAAFA,GAAOC,GAAK,YAC1B,GAAIpB,GAAS,GACT,OACI,gBAAKS,UAAU,iBAAgB,UAC3B,SAACyB,EAAA,GAAgB,UAAKd,KADWD,EAKjD,IAKJ,OACI,gBAAKV,UAAU,yBAAwB,SAClCQ,GAGb,EA6EA,EA3EyB,SAAH,GAAkC,IAA5Bc,EAAK,EAALA,MAAOI,EAAa,EAAbA,cAE/B,GAAwClC,EAAAA,EAAAA,UAAS,IAAG,eAA7CgC,EAAY,KAAEG,EAAe,KACpC,GAAkCnC,EAAAA,EAAAA,UAAS,GAAE,eAAtCoC,EAAS,KAAEC,EAAY,KAC9B,GAAoCrC,EAAAA,EAAAA,UAAS,GAAE,eAAxCsC,EAAU,KAAEC,EAAa,KAahC,IATAZ,EAAAA,EAAAA,YAAU,WACNa,GACJ,GAAG,CAACV,KAEJH,EAAAA,EAAAA,YAAU,WACNa,IACAC,OAAOC,SAAS,EAAG,EACvB,GAAG,CAACJ,EATiB,KAWC,YAAlBJ,EACA,OACI,gBAAK1B,UAAU,uBAAsB,UACjC,SAACI,EAAA,EAAO,MAGb,GAAsB,UAAlBsB,EACP,OACI,iBAAK1B,UAAU,mBAAkB,WAC7B,gBAAKC,IAAKM,EAAWL,IAAI,KAAK,WAM1C,IAAM8B,EAAa,WACf,IAAMG,EAAYL,EA3BD,GA4BjBH,EAAgBL,EAAMc,MAAMN,EAAYK,IACxCN,EAAaQ,KAAKC,KAAKhB,EAAMiB,OA7BZ,IA8BrB,EAOA,OACI,gBAAKvC,UAAU,gBAAe,UAC1B,iBAAKA,UAAU,YAAW,WACtB,SAACuB,EAAK,CAACC,aAAcA,KACrB,gBAAKxB,UAAU,oCAAmC,UAC9C,SAAC,IAAa,CACVwC,UAAU,IACVC,aAZI,SAACC,GACrB,IAAMC,EAjCW,GAiCCD,EAAME,SAA0BtB,EAAMiB,OACxDR,EAAcY,EAClB,EAUoBE,mBAAoB,EACpBC,qBAAsB,EACtBlB,UAAWA,EACXmB,cAAc,IACdC,cAAc,YACdC,kBAAkB,YAClBC,kBAAkB,YAClBC,sBAAsB,YACtBC,cAAc,YACdC,kBAAkB,YAClBC,WAAW,MACXC,eAAe,YACfC,mBAAmB,YACnBC,mBAAmB,aACnBC,gBAAgB,mBAChBC,sBAAuB,aAO/C,C,qBChGA,IAPuB,SAACC,GACpB,IAAMC,EAAWD,EAAIE,QAAQ,MAG7B,MAFgB,UAAMF,EAAIxB,MAAM,EAAGyB,GAAS,2BAGhD,C","sources":["components/inTheatersList/inTheatersListItem/InTheatersListItem.js","components/inTheatersList/InTheatersList.js","components/inTheaters/InTheaters.js","components/pages/InTheatersPage.js","components/templateListItem/TemplateListItem.js","components/templatePageList/TemplatePageList.js","utils/changeUrlImage.js"],"sourcesContent":["import { useState } from 'react';\r\nimport classNames from \"classnames\";\r\nimport changeUrlImage from \"../../../utils/changeUrlImage\";\r\nimport Spinner from \"../../spinner/Spinner\";\r\n\r\nimport './inTheatersListItem.scss'\r\n\r\nconst InTheatersListItem = ({ title, year, plot, image, imDbRating, metacriticRating, index }) => {\r\n    const [imageLoaded, setImageLoaded] = useState(false);\r\n\r\n    const handleImageLoaded = () => {\r\n        setImageLoaded(true)\r\n    };\r\n\r\n    const imageClass = classNames({\r\n        'in-theaters__image_loading': !imageLoaded\r\n    })\r\n\r\n    const itemSizeClass = classNames(\r\n        'in-theaters__item',\r\n        { 'in-theaters__big': index === 0 },\r\n        { 'in-theaters__small': index === 1 },\r\n        { 'in-theaters__small second': index === 2 }\r\n    )\r\n\r\n    const changedImage = changeUrlImage(image)\r\n\r\n    return (\r\n        <div className={itemSizeClass}>\r\n            <img\r\n                className={`${imageClass}`}\r\n                src={changedImage}\r\n                alt=\"in theaters\"\r\n                onLoad={handleImageLoaded} />\r\n            {\r\n                !imageLoaded\r\n                    ? <Spinner />\r\n                    : null\r\n            }\r\n            <div className=\"in-theaters__info\">\r\n                <h2 className=\"in-theaters__title\">{title}</h2>\r\n                <div className=\"in-theaters__year\">{year}</div>\r\n                <p className=\"in-theaters__plot\">{plot}</p>\r\n                <div className=\"in-theaters__ratings\">\r\n                    <div className=\"in-theaters__ratings-name\">\r\n                        IMDB:<span>{imDbRating}</span>\r\n                    </div>\r\n                    <div className=\"in-theaters__ratings-name\">\r\n                        MC:<span>{metacriticRating}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <button className=\"btn in-theaters__btn-watch\">\r\n                watch\r\n            </button>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default InTheatersListItem","import { Link } from 'react-router-dom';\r\nimport InTheatersListItem from './inTheatersListItem/InTheatersListItem';\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorIcon from '../../resources/img/icon/error.png';\r\n\r\nimport '../../style/style.scss';\r\nimport './inTheatersList.scss';\r\n\r\nconst InTheatersList = ({inTheaters, inTheatersLoadingStatus}) => {\r\n\r\n    if (inTheatersLoadingStatus === 'loading') {\r\n        return (\r\n            <div className=\"in-theaters\">\r\n                <div className=\"container\">\r\n                    <h2 className=\"title\">In theaters</h2>\r\n                    <div className=\"spinner\">\r\n                        <Spinner />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else if (inTheatersLoadingStatus === 'error') {\r\n        return (\r\n            <div className=\"in-theaters\">\r\n                <div className=\"container\">\r\n                    <h2 className=\"title\">In theaters</h2>\r\n                    <div className=\"error\">\r\n                        <img src={ErrorIcon} alt=\"\" />\r\n                        Error\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderList = (arr) => {\r\n        return arr.map(({ id, ...props }, index) => {\r\n            if (index < 3) {\r\n                return (\r\n                    <InTheatersListItem\r\n                        key={id}\r\n                        index={index}\r\n                        {...props}\r\n                    />\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    const elements = renderList(inTheaters)\r\n\r\n    return (\r\n        <div className=\"in-theaters\">\r\n            <div className=\"container\">\r\n                <h2 className=\"title\">In theaters <Link to='/moviebe/intheatre'>see more...</Link></h2>\r\n                <div className=\"in-theaters__wrapper\">\r\n                    {elements}\r\n                    <button className=\"btn in-theaters__btn-link\">see more</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InTheatersList;","import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { fetchInTheaters } from './inTheatersSlice';\r\nimport InTheatersList from '../inTheatersList/InTheatersList';\r\nimport TemplatePageList from \"../templatePageList/TemplatePageList\";\r\n\r\nconst InTheaters = () => {\r\n    const { pathname } = useLocation();\r\n    const { inTheaters, inTheatersLoadingStatus } = useSelector(state => state.inTheaters)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchInTheaters());\r\n    }, [])\r\n\r\n    if (pathname === '/moviebe/') {\r\n        return <InTheatersList\r\n            inTheaters={inTheaters}\r\n            inTheatersLoadingStatus={inTheatersLoadingStatus}\r\n        />\r\n    }\r\n\r\n    if (pathname === '/moviebe/intheaters') {\r\n        return <TemplatePageList items={inTheaters} inTheatersLoadingStatus={inTheatersLoadingStatus} />\r\n    }\r\n}\r\n\r\nexport default InTheaters","import InTheaters from \"../inTheaters/InTheaters\"\r\n\r\nconst InTheatersPage = () => {\r\n    return <InTheaters/>\r\n}\r\n\r\nexport default InTheatersPage","import { useState } from 'react';\r\nimport classNames from 'classnames';\r\nimport changeUrlImage from '../../utils/changeUrlImage'\r\nimport Spinner from \"../spinner/Spinner\";\r\n\r\nimport './templateListItem.scss'\r\n\r\nconst TemplateListItem = ({ title, year, image }) => {\r\n    const [imageLoaded, setImageLoaded] = useState(false)\r\n    const changedImage = changeUrlImage(image)\r\n\r\n    const handleImageLoaded = () => {\r\n        setImageLoaded(true)\r\n    };\r\n\r\n    const imageClass = classNames({\r\n        'template__image_loading': !imageLoaded\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <div className='template__image'>\r\n                <img className={`${imageClass}`} src={changedImage} alt=\"movies\" onLoad={handleImageLoaded} />\r\n                {\r\n                    !imageLoaded\r\n                        ? <Spinner />\r\n                        : null\r\n                }\r\n            </div>\r\n            <h2 className=\"template__title\">{title}</h2>\r\n            <div className=\"template__year\">({year})</div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TemplateListItem;","import { useEffect, useState } from \"react\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport TemplateListItem from \"../templateListItem/TemplateListItem\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorIcon from '../../resources/img/icon/error.png';\r\n\r\nimport './templatePageList.scss';\r\n\r\nconst Items = ({ currentItems }) => {\r\n    const renderItems = (arr) => {\r\n        return arr.map(({ id, ...props }, index) => {\r\n            if (index <= 50) {\r\n                return (\r\n                    <div className=\"template__item\" key={id}>\r\n                        <TemplateListItem {...props} />\r\n                    </div>\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    const elements = renderItems(currentItems)\r\n\r\n    return (\r\n        <div className=\"template-page__wrapper\">\r\n            {elements}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst TemplatePageList = ({ items, loadingStatus }) => {\r\n\r\n    const [currentItems, setCurrentItems] = useState([]);\r\n    const [pageCount, setPageCount] = useState(0);\r\n    const [itemOffset, setItemOffset] = useState(0);\r\n\r\n    const itemsPerPage = 48;\r\n\r\n    useEffect(() => {\r\n        changePage();\r\n    }, [items])\r\n\r\n    useEffect(() => {\r\n        changePage();\r\n        window.scrollTo(0, 0);\r\n    }, [itemOffset, itemsPerPage]);\r\n\r\n    if (loadingStatus === 'loading') {\r\n        return (\r\n            <div className=\"spinner spinner-page\">\r\n                <Spinner />\r\n            </div>\r\n        )\r\n    } else if (loadingStatus === 'error') {\r\n        return (\r\n            <div className=\"error error-page\">\r\n                <img src={ErrorIcon} alt=\"\" />\r\n                Error\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const changePage = () => {\r\n        const endOffset = itemOffset + itemsPerPage;\r\n        setCurrentItems(items.slice(itemOffset, endOffset));\r\n        setPageCount(Math.ceil(items.length / itemsPerPage));\r\n    }\r\n\r\n    const handlePageClick = (event) => {\r\n        const newOffset = event.selected * itemsPerPage % items.length;\r\n        setItemOffset(newOffset);\r\n    };\r\n\r\n    return (\r\n        <div className=\"template-page\">\r\n            <div className=\"container\">\r\n                <Items currentItems={currentItems} />\r\n                <div className=\"template-page__pagination-wrapper\">\r\n                    <ReactPaginate\r\n                        nextLabel=\">\"\r\n                        onPageChange={handlePageClick}\r\n                        pageRangeDisplayed={3}\r\n                        marginPagesDisplayed={2}\r\n                        pageCount={pageCount}\r\n                        previousLabel=\"<\"\r\n                        pageClassName=\"page-item\"\r\n                        pageLinkClassName=\"page-link\"\r\n                        previousClassName=\"page-item\"\r\n                        previousLinkClassName=\"page-link\"\r\n                        nextClassName=\"page-item\"\r\n                        nextLinkClassName=\"page-link\"\r\n                        breakLabel=\"...\"\r\n                        breakClassName=\"page-item\"\r\n                        breakLinkClassName=\"page-link\"\r\n                        containerClassName=\"pagination\"\r\n                        activeClassName=\"page-item_active\"\r\n                        renderOnZeroPageCount={null}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default TemplatePageList;\r\n","const changeUrlImage = (url) => {\r\n    const endIndex = url.indexOf('._');\r\n    const changedUrl = `${url.slice(0, endIndex)}._V1_Ratio0.6716_AL_.jpg`;\r\n    \r\n    return changedUrl\r\n}\r\n\r\nexport default changeUrlImage"],"names":["title","year","plot","image","imDbRating","metacriticRating","index","useState","imageLoaded","setImageLoaded","imageClass","classNames","itemSizeClass","changedImage","changeUrlImage","className","src","alt","onLoad","Spinner","inTheaters","inTheatersLoadingStatus","ErrorIcon","elements","map","id","props","to","pathname","useLocation","useSelector","state","dispatch","useDispatch","useEffect","fetchInTheaters","TemplatePageList","items","Items","currentItems","TemplateListItem","loadingStatus","setCurrentItems","pageCount","setPageCount","itemOffset","setItemOffset","changePage","window","scrollTo","endOffset","slice","Math","ceil","length","nextLabel","onPageChange","event","newOffset","selected","pageRangeDisplayed","marginPagesDisplayed","previousLabel","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakLabel","breakClassName","breakLinkClassName","containerClassName","activeClassName","renderOnZeroPageCount","url","endIndex","indexOf"],"sourceRoot":""}