{"version":3,"file":"static/js/631.7d0ecf82.chunk.js","mappings":"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","sources":["components/inTheatersList/inTheatersListItem/InTheatersListItem.js","components/inTheatersList/InTheatersList.js","components/inTheaters/InTheaters.js","components/pages/InTheatersPage.js","components/templateListItem/TemplateListItem.js","components/templatePageList/TemplatePageList.js","utils/changeUrlImage.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import { useState } from 'react';\r\nimport classNames from \"classnames\";\r\nimport changeUrlImage from \"../../../utils/changeUrlImage\";\r\nimport Spinner from \"../../spinner/Spinner\";\r\n\r\nimport './inTheatersListItem.scss'\r\nimport { Link } from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\n\r\nconst InTheatersListItem = ({ id, title, year, plot, image, imDbRating, metacriticRating, index }) => {\r\n    const [imageLoaded, setImageLoaded] = useState(false);\r\n    const [widthViewport, setWidthViewport] = useState(0);\r\n\r\n    useEffect(() => {\r\n\r\n        window.addEventListener(\"resize\", resizeHandler);\r\n        resizeHandler();\r\n        return () => {\r\n            window.removeEventListener(\"resize\", resizeHandler);\r\n        };\r\n    }, [])\r\n\r\n    const resizeHandler = () => {\r\n        setWidthViewport(window.innerWidth);\r\n    };\r\n\r\n    const handleImageLoaded = () => {\r\n        setImageLoaded(true)\r\n    };\r\n\r\n    const imageClass = classNames({\r\n        'in-theaters__image_loading': !imageLoaded\r\n    })\r\n\r\n\r\n\r\n    const itemSizeClass = classNames(\r\n        'in-theaters__item',\r\n        {\r\n            'in-theaters__big': index === 0 && widthViewport > 1140,\r\n            'in-theaters__small': index === 1 || (index === 0 && widthViewport <= 1140) || index === 3,\r\n            'in-theaters__small second': index === 2\r\n        }\r\n    )\r\n\r\n    const changedImage = changeUrlImage(image)\r\n\r\n    return (\r\n        <div className={itemSizeClass}>\r\n            <img\r\n                className={`${imageClass}`}\r\n                src={changedImage}\r\n                alt=\"in theaters\"\r\n                onLoad={handleImageLoaded} />\r\n            {\r\n                !imageLoaded\r\n                    ? <Spinner />\r\n                    : null\r\n            }\r\n            <div className=\"in-theaters__info\">\r\n                <h2 className=\"in-theaters__title\">{title}</h2>\r\n                <div className=\"in-theaters__year\">{year}</div>\r\n                <p className=\"in-theaters__plot\">{plot}</p>\r\n                <div className=\"in-theaters__ratings\">\r\n                    <div className=\"in-theaters__ratings-name\">\r\n                        IMDB:<span>{imDbRating}</span>\r\n                    </div>\r\n                    <div className=\"in-theaters__ratings-name\">\r\n                        MC:<span>{metacriticRating}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Link to={`/${id}`}>\r\n                <button className=\"btn in-theaters__btn-watch\">\r\n                    watch\r\n                </button>\r\n            </Link>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default InTheatersListItem","import { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport InTheatersListItem from './inTheatersListItem/InTheatersListItem';\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorIcon from '../../resources/img/icon/error.png';\r\n\r\nimport '../../style/style.scss';\r\nimport './inTheatersList.scss';\r\n\r\nconst InTheatersList = ({ inTheaters, inTheatersLoadingStatus }) => {\r\n    const [widthViewport, setWidthViewport] = useState(0);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"resize\", resizeHandler);\r\n        resizeHandler();\r\n        return () => {\r\n            window.removeEventListener(\"resize\", resizeHandler);\r\n        };\r\n    }, [])\r\n\r\n    const resizeHandler = () => {\r\n        setWidthViewport(window.innerWidth);\r\n    };\r\n\r\n    if (inTheatersLoadingStatus === 'loading') {\r\n        return (\r\n            <div className=\"in-theaters\">\r\n                <h2 className=\"title\">In theaters</h2>\r\n                <div className=\"spinner\">\r\n                    <Spinner />\r\n                </div>\r\n            </div>\r\n        )\r\n    } else if (inTheatersLoadingStatus === 'error') {\r\n        return (\r\n            <div className=\"in-theaters\">\r\n                <h2 className=\"title\">In theaters</h2>\r\n                <div className=\"error\">\r\n                    <img src={ErrorIcon} alt=\"\" />\r\n                    Error\r\n                </div>\r\n            </div>\r\n        )\r\n    } else if (inTheaters.length === 0) {\r\n        return (\r\n            <div className=\"in-theaters\">\r\n                <h2 className=\"title\">In theaters</h2>\r\n                <div className=\"error\">\r\n                    <img src={ErrorIcon} alt=\"\" />\r\n                    <div>The maximum number of requests</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderList = (arr) => {\r\n        let amountMovie = 3;\r\n\r\n        if (widthViewport <= 768) {\r\n            amountMovie = 4\r\n        }\r\n        return arr.map(({ id, ...props }, index) => {\r\n            if (index < amountMovie) {\r\n                return (\r\n                    <InTheatersListItem\r\n                        key={id}\r\n                        index={index}\r\n                        id={id}\r\n                        {...props}\r\n                    />\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    const elements = renderList(inTheaters)\r\n\r\n    return (\r\n        <div className=\"in-theaters\">\r\n            <h2 className=\"title\">In theaters <Link to='/intheatre'>see more...</Link></h2>\r\n            <div className=\"in-theaters__wrapper\">\r\n                {elements}\r\n                <Link to='/intheaters'>\r\n                    <button className=\"btn in-theaters__btn-link\">see more</button>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InTheatersList;","import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { fetchInTheaters } from './inTheatersSlice';\r\nimport InTheatersList from '../inTheatersList/InTheatersList';\r\nimport TemplatePageList from \"../templatePageList/TemplatePageList\";\r\n\r\nconst InTheaters = () => {\r\n    const { pathname } = useLocation();\r\n    const { inTheaters, inTheatersLoadingStatus } = useSelector(state => state.inTheaters)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchInTheaters());\r\n    }, [])\r\n\r\n    if (pathname === '/') {\r\n        return <InTheatersList\r\n            inTheaters={inTheaters}\r\n            inTheatersLoadingStatus={inTheatersLoadingStatus}\r\n        />\r\n    }\r\n\r\n    if (pathname === '/intheaters') {\r\n        return <TemplatePageList items={inTheaters} inTheatersLoadingStatus={inTheatersLoadingStatus} />\r\n    }\r\n}\r\n\r\nexport default InTheaters","import InTheaters from \"../inTheaters/InTheaters\"\r\n\r\nconst InTheatersPage = () => {\r\n    return <InTheaters />\r\n}\r\n\r\nexport default InTheatersPage","import { useState, useEffect } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\nimport changeUrlImage from '../../utils/changeUrlImage';\r\nimport Spinner from \"../spinner/Spinner\";\r\n\r\nimport 'swiper/css/lazy';\r\nimport './templateListItem.scss'\r\n\r\nconst TemplateListItem = ({ title, year, image, id, imDbRating }) => {\r\n    const [imageLoaded, setImageLoaded] = useState(false)\r\n    const [widthViewport, setWidthViewport] = useState(0);\r\n    const { pathname } = useLocation()\r\n    const changedImage = changeUrlImage(image);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"resize\", resizeHandler);\r\n        resizeHandler();\r\n        return () => {\r\n            window.removeEventListener(\"resize\", resizeHandler);\r\n        };\r\n    }, [])\r\n\r\n    const resizeHandler = () => {\r\n        setWidthViewport(window.innerWidth);\r\n    };\r\n\r\n    const handleImageLoaded = () => {\r\n        setImageLoaded(true)\r\n    };\r\n\r\n    const imageClass = classNames({\r\n        'template__image_loading': !imageLoaded\r\n    })\r\n\r\n    if (pathname === '/' || pathname === `/${id}`) {\r\n        return (\r\n            <Link to={`/${id}`}>\r\n                <div className='template__image' >\r\n                    <img\r\n                        className='swiper-lazy'\r\n                        data-srcset={changedImage}\r\n                        loading='lazy'\r\n                        alt='' />\r\n                    <div className='template__image__overlay'>\r\n                        <button className='template__image__btn'>watch</button>\r\n                        <span>\r\n                            <div className=\"template__image__rating\">IMDB: <span>{imDbRating}</span></div>\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"swiper-lazy-preloader swiper-lazy-preloader-white\"></div>\r\n                </div>\r\n\r\n                <h2 className=\"template__title\">{title}</h2>\r\n                <div className=\"template__year\">{year}</div>\r\n            </Link>\r\n        )\r\n    } else {\r\n        return (\r\n            <Link to={`/${id}`}>\r\n                <div className='template__image'>\r\n                    <img className={`${imageClass}`} src={changedImage} alt=\"movies\" onLoad={handleImageLoaded} />\r\n                    <div className='template__image__overlay'>\r\n                        <button className='template__image__btn'>watch</button>\r\n                        <span>\r\n                            <div className=\"template__image__rating\">IMDB: <span>{imDbRating}</span></div>\r\n                        </span>\r\n                    </div>\r\n                    {\r\n                        !imageLoaded\r\n                            ? <Spinner />\r\n                            : null\r\n                    }\r\n                </div>\r\n\r\n                <h2 className=\"template__title\">{title}</h2>\r\n                <div className=\"template__year\">{year}</div>\r\n            </Link>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TemplateListItem;","import { useEffect, useState } from \"react\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport TemplateListItem from \"../templateListItem/TemplateListItem\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorIcon from '../../resources/img/icon/error.png';\r\n\r\nimport './templatePageList.scss';\r\n\r\nconst Items = ({ currentItems }) => {\r\n    const renderItems = (arr) => {\r\n        return arr.map(({ id, ...props }, index) => {\r\n            if (index <= 50) {\r\n                return (\r\n                    <div className=\"template__item\" key={id}>\r\n                        <TemplateListItem {...props} id={id} />\r\n                    </div>\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    const elements = renderItems(currentItems)\r\n\r\n    return (\r\n        <div className=\"template-page__wrapper\">\r\n            {elements}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst TemplatePageList = ({ items, loadingStatus }) => {\r\n\r\n    const [currentItems, setCurrentItems] = useState([]);\r\n    const [pageCount, setPageCount] = useState(0);\r\n    const [itemOffset, setItemOffset] = useState(0);\r\n\r\n    const itemsPerPage = 48;\r\n\r\n    useEffect(() => {\r\n        changePage();\r\n    }, [items])\r\n\r\n    useEffect(() => {\r\n        changePage();\r\n        window.scrollTo(0, 0);\r\n    }, [itemOffset, itemsPerPage]);\r\n\r\n    if (loadingStatus === 'loading') {\r\n        return (\r\n            <div className=\"spinner spinner-page\">\r\n                <Spinner />\r\n            </div>\r\n        )\r\n    } else if (loadingStatus === 'error') {\r\n        return (\r\n            <div className=\"error error-page\">\r\n                <img src={ErrorIcon} alt=\"\" />\r\n                Error\r\n            </div>\r\n        )\r\n    } else if (items.length === 0) {\r\n        return (\r\n            <div className=\"template-swiper\">\r\n                <h2 className=\"title\">\r\n                </h2>\r\n                <div className=\"error\">\r\n                    <img src={ErrorIcon} alt=\"\" />\r\n                    <div>The maximum number of requests</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function changePage() {\r\n        const endOffset = itemOffset + itemsPerPage;\r\n        setCurrentItems(items.slice(itemOffset, endOffset));\r\n        setPageCount(Math.ceil(items.length / itemsPerPage));\r\n    }\r\n\r\n    const handlePageClick = (event) => {\r\n        const newOffset = event.selected * itemsPerPage % items.length;\r\n        setItemOffset(newOffset);\r\n    };\r\n\r\n    return (\r\n        <div className=\"template-page\">\r\n            <Items currentItems={currentItems} />\r\n            <div className=\"template-page__pagination-wrapper\">\r\n                <ReactPaginate\r\n                    nextLabel=\">\"\r\n                    onPageChange={handlePageClick}\r\n                    pageRangeDisplayed={3}\r\n                    marginPagesDisplayed={2}\r\n                    pageCount={pageCount}\r\n                    previousLabel=\"<\"\r\n                    pageClassName=\"page-item\"\r\n                    pageLinkClassName=\"page-link\"\r\n                    previousClassName=\"page-item\"\r\n                    previousLinkClassName=\"page-link\"\r\n                    nextClassName=\"page-item\"\r\n                    nextLinkClassName=\"page-link\"\r\n                    breakLabel=\"...\"\r\n                    breakClassName=\"page-item\"\r\n                    breakLinkClassName=\"page-link\"\r\n                    containerClassName=\"pagination\"\r\n                    activeClassName=\"page-item_active\"\r\n                    renderOnZeroPageCount={null}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default TemplatePageList;\r\n","const changeUrlImage = (url) => {\r\n    const endIndex = url.indexOf('._');\r\n    const changedUrl = `${url.slice(0, endIndex)}._V1_Ratio0.6716_AL_.jpg`;\r\n    \r\n    return changedUrl\r\n}\r\n\r\nexport default changeUrlImage","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}"],"names":["id","title","year","plot","image","imDbRating","metacriticRating","index","useState","imageLoaded","setImageLoaded","widthViewport","setWidthViewport","useEffect","window","addEventListener","resizeHandler","removeEventListener","innerWidth","imageClass","classNames","itemSizeClass","changedImage","changeUrlImage","className","src","alt","onLoad","Spinner","to","inTheaters","inTheatersLoadingStatus","ErrorIcon","length","elements","arr","amountMovie","map","props","renderList","pathname","useLocation","useSelector","state","dispatch","useDispatch","fetchInTheaters","TemplatePageList","items","loading","Items","currentItems","TemplateListItem","loadingStatus","setCurrentItems","pageCount","setPageCount","itemOffset","setItemOffset","changePage","scrollTo","endOffset","slice","Math","ceil","nextLabel","onPageChange","event","newOffset","selected","pageRangeDisplayed","marginPagesDisplayed","previousLabel","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakLabel","breakClassName","breakLinkClassName","containerClassName","activeClassName","renderOnZeroPageCount","url","endIndex","indexOf","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call"],"sourceRoot":""}