{"version":3,"file":"static/js/641.2bcb1425.chunk.js","mappings":"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","sources":["components/comingSoon/ComingSoon.js","components/inTheatersList/inTheatersListItem/InTheatersListItem.js","components/inTheatersList/InTheatersList.js","components/inTheaters/InTheaters.js","components/movies/Movies.js","components/promo/Promo.js","components/pages/MainPage.js","components/series/Series.js","components/templateListItem/TemplateListItem.js","components/templateListSwiper/TemplateListSwiper.js","components/templatePageList/TemplatePageList.js","utils/changeUrlImage.js"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useLocation } from \"react-router-dom\";\r\nimport TemplateListSwiper from \"../templateListSwiper/TemplateListSwiper\"\r\nimport TemplatePageList from \"../templatePageList/TemplatePageList\";\r\nimport { fetchComingSoon } from \"./comingSoonSlice\";\r\n\r\n\r\nconst ComingSoon = () => {\r\n    const { pathname } = useLocation()\r\n    const { comingSoon, comingSoonLoadingStatus } = useSelector(state => state.comingSoon);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchComingSoon())\r\n    }, [])\r\n\r\n    if (pathname === '/moviebe/') {\r\n        return <TemplateListSwiper\r\n            data={comingSoon}\r\n            title={'Coming Soon'}\r\n            loadingStatus={comingSoonLoadingStatus}\r\n            linkPage={'/moviebe/comingsoon'} />\r\n    }\r\n\r\n    if (pathname === '/moviebe/comingsoon') {\r\n        return <TemplatePageList items={comingSoon} loadingStatus={comingSoonLoadingStatus} />\r\n    }\r\n}\r\n\r\nexport default ComingSoon","import { useState } from 'react';\r\nimport classNames from \"classnames\";\r\nimport changeUrlImage from \"../../../utils/changeUrlImage\";\r\nimport Spinner from \"../../spinner/Spinner\";\r\n\r\nimport './inTheatersListItem.scss'\r\nimport { Link } from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\n\r\nconst InTheatersListItem = ({ id, title, year, plot, image, imDbRating, metacriticRating, index }) => {\r\n    const [imageLoaded, setImageLoaded] = useState(false);\r\n    const [widthViewport, setWidthViewport] = useState(0);\r\n\r\n    useEffect(() => {\r\n\r\n        window.addEventListener(\"resize\", resizeHandler);\r\n        resizeHandler();\r\n        return () => {\r\n            window.removeEventListener(\"resize\", resizeHandler);\r\n        };\r\n    }, [])\r\n\r\n    const resizeHandler = () => {\r\n        setWidthViewport(window.innerWidth);\r\n    };\r\n\r\n    const handleImageLoaded = () => {\r\n        setImageLoaded(true)\r\n    };\r\n\r\n    const imageClass = classNames({\r\n        'in-theaters__image_loading': !imageLoaded\r\n    })\r\n\r\n\r\n\r\n    const itemSizeClass = classNames(\r\n        'in-theaters__item',\r\n        {\r\n            'in-theaters__big': index === 0 && widthViewport > 1140,\r\n            'in-theaters__small': index === 1 || (index === 0 && widthViewport <= 1140) || index === 3,\r\n            'in-theaters__small second': index === 2\r\n        }\r\n    )\r\n\r\n    const changedImage = changeUrlImage(image)\r\n\r\n    return (\r\n        <div className={itemSizeClass}>\r\n            <img\r\n                className={`${imageClass}`}\r\n                src={changedImage}\r\n                alt=\"in theaters\"\r\n                onLoad={handleImageLoaded} />\r\n            {\r\n                !imageLoaded\r\n                    ? <Spinner />\r\n                    : null\r\n            }\r\n            <div className=\"in-theaters__info\">\r\n                <h2 className=\"in-theaters__title\">{title}</h2>\r\n                <div className=\"in-theaters__year\">{year}</div>\r\n                <p className=\"in-theaters__plot\">{plot}</p>\r\n                <div className=\"in-theaters__ratings\">\r\n                    <div className=\"in-theaters__ratings-name\">\r\n                        IMDB:<span>{imDbRating}</span>\r\n                    </div>\r\n                    <div className=\"in-theaters__ratings-name\">\r\n                        MC:<span>{metacriticRating}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Link to={`/moviebe/${id}`}>\r\n                <button className=\"btn in-theaters__btn-watch\">\r\n                    watch\r\n                </button>\r\n            </Link>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default InTheatersListItem","import { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport InTheatersListItem from './inTheatersListItem/InTheatersListItem';\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorIcon from '../../resources/img/icon/error.png';\r\n\r\nimport '../../style/style.scss';\r\nimport './inTheatersList.scss';\r\n\r\nconst InTheatersList = ({ inTheaters, inTheatersLoadingStatus }) => {\r\n    const [widthViewport, setWidthViewport] = useState(0);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"resize\", resizeHandler);\r\n        resizeHandler();\r\n        return () => {\r\n            window.removeEventListener(\"resize\", resizeHandler);\r\n        };\r\n    }, [])\r\n\r\n    const resizeHandler = () => {\r\n        setWidthViewport(window.innerWidth);\r\n    };\r\n\r\n    if (inTheatersLoadingStatus === 'loading') {\r\n        return (\r\n            <div className=\"in-theaters\">\r\n                <h2 className=\"title\">In theaters</h2>\r\n                <div className=\"spinner\">\r\n                    <Spinner />\r\n                </div>\r\n            </div>\r\n        )\r\n    } else if (inTheatersLoadingStatus === 'error') {\r\n        return (\r\n            <div className=\"in-theaters\">\r\n                <h2 className=\"title\">In theaters</h2>\r\n                <div className=\"error\">\r\n                    <img src={ErrorIcon} alt=\"\" />\r\n                    Error\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderList = (arr) => {\r\n        let amountMovie = 3;\r\n\r\n        if (widthViewport <= 768) {\r\n            amountMovie = 4\r\n        }\r\n        return arr.map(({ id, ...props }, index) => {\r\n            if (index < amountMovie) {\r\n                return (\r\n                    <InTheatersListItem\r\n                        key={id}\r\n                        index={index}\r\n                        id={id}\r\n                        {...props}\r\n                    />\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    const elements = renderList(inTheaters)\r\n\r\n    return (\r\n        <div className=\"in-theaters\">\r\n            <h2 className=\"title\">In theaters <Link to='/moviebe/intheatre'>see more...</Link></h2>\r\n            <div className=\"in-theaters__wrapper\">\r\n                {elements}\r\n                <Link to='/moviebe/intheaters'>\r\n                    <button className=\"btn in-theaters__btn-link\">see more</button>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InTheatersList;","import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { fetchInTheaters } from './inTheatersSlice';\r\nimport InTheatersList from '../inTheatersList/InTheatersList';\r\nimport TemplatePageList from \"../templatePageList/TemplatePageList\";\r\n\r\nconst InTheaters = () => {\r\n    const { pathname } = useLocation();\r\n    const { inTheaters, inTheatersLoadingStatus } = useSelector(state => state.inTheaters)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchInTheaters());\r\n    }, [])\r\n\r\n    if (pathname === '/moviebe/') {\r\n        return <InTheatersList\r\n            inTheaters={inTheaters}\r\n            inTheatersLoadingStatus={inTheatersLoadingStatus}\r\n        />\r\n    }\r\n\r\n    if (pathname === '/moviebe/intheaters') {\r\n        return <TemplatePageList items={inTheaters} inTheatersLoadingStatus={inTheatersLoadingStatus} />\r\n    }\r\n}\r\n\r\nexport default InTheaters","import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation } from 'react-router-dom';\r\nimport TemplateListSwiper from '../templateListSwiper/TemplateListSwiper';\r\nimport TemplatePageList from '../templatePageList/TemplatePageList';\r\n\r\nimport { fetchMovies } from './moviesSlice';\r\n\r\nconst Movies = () => {\r\n    const { pathname } = useLocation()\r\n    const { movies, moviesLoadingStatus } = useSelector(state => state.movies)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchMovies());\r\n    }, [])\r\n\r\n    if (pathname === '/moviebe/') {\r\n        return <TemplateListSwiper\r\n            data={movies}\r\n            title={'Movies'}\r\n            loadingStatus={moviesLoadingStatus}\r\n            linkPage={'/moviebe/movies'} />\r\n\r\n    }\r\n\r\n    if (pathname === '/moviebe/movies') {\r\n        return <TemplatePageList items={movies} loadingStatus={moviesLoadingStatus} />\r\n    }\r\n}\r\n\r\nexport default Movies;","import { useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport changeUrlImage from '../../utils/changeUrlImage';\r\n\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorIcon from '../../resources/img/icon/error.png';\r\nimport BackgroundImg from '../../resources/img/background.jpg'\r\n\r\nimport './promo.scss'\r\n\r\nconst Promo = () => {\r\n    const { inTheaters: promo, inTheatersLoadingStatus: promoLoadingStatus } = useSelector(state => state.inTheaters);\r\n\r\n    if (promoLoadingStatus === 'loading') {\r\n        return (\r\n            <div className=\"promo\">\r\n                <div className=\"spinner\">\r\n                    <Spinner />\r\n                </div>\r\n                <div className=\"promo__bg\"></div>\r\n            </div>\r\n        )\r\n    } else if (promoLoadingStatus === 'error') {\r\n        return (\r\n            <div className=\"promo\">\r\n                <div className=\"error\">\r\n                    <img src={ErrorIcon} alt=\"\" />\r\n                    Error\r\n                </div>\r\n                <div className=\"promo__bg\"></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderPromo = (arr) => {\r\n        const random = (min, max) => {\r\n            return Math.floor(Math.random() * (max - min + 1)) + min;\r\n        }\r\n\r\n        if (arr.length) {\r\n            const { id, title, fullTitle, plot, imDbRating, metacriticRating, image } = arr[random(3, arr.length)]\r\n\r\n            return (\r\n                <>\r\n                    <div className=\"promo__info\">\r\n                        <h1 className=\"promo__title\">{title}</h1>\r\n                        <div className=\"promo__original-title\">{fullTitle}</div>\r\n                        <p className=\"promo__description\">\r\n                            {plot}\r\n                        </p>\r\n                        <div className=\"promo__ratings\">\r\n                            <div className=\"promo__ratings-name\">\r\n                                IMDB:<span>{imDbRating}</span>\r\n                            </div>\r\n                            <div className=\"promo__ratings-name\">\r\n                                MC:<span>{metacriticRating}</span>\r\n                            </div>\r\n                        </div>\r\n                        <Link to={`/moviebe/${id}`}>\r\n                            <button className=\"btn promo__btn\">more details</button>\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"promo__img\">\r\n                        <img src={changeUrlImage(image)} alt=\"movies\" />\r\n                    </div>\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    const element = renderPromo(promo)\r\n\r\n    return (\r\n        <div className=\"promo\">\r\n            {element}\r\n            <img className=\"promo__bg\" src={BackgroundImg}/>\r\n            <div className=\"promo__bg_overlay\"></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Promo","import Promo from '../promo/Promo';\r\nimport InTheaters from '../inTheaters/InTheaters';\r\nimport ComingSoon from '../comingSoon/ComingSoon';\r\nimport Movies from '../movies/Movies';\r\nimport Series from '../series/Series';\r\n\r\nconst MainPage = () => {\r\n    return (\r\n        <>\r\n            <Promo />\r\n            <InTheaters />\r\n            <ComingSoon />\r\n            <Movies />\r\n            <Series />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage","import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { fetchSeries } from \"./seriesSlice\";\r\n\r\nimport TemplateListSwiper from \"../templateListSwiper/TemplateListSwiper\";\r\nimport TemplatePageList from \"../templatePageList/TemplatePageList\";\r\n\r\nconst Series = () => {\r\n    const { pathname } = useLocation()\r\n    const { series, seriesLoadingStatus } = useSelector(state => state.series);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchSeries())\r\n    }, [])\r\n\r\n    if (pathname === '/moviebe/') {\r\n        return <TemplateListSwiper\r\n            data={series}\r\n            title={'Series'}\r\n            loadingStatus={seriesLoadingStatus}\r\n            linkPage={'/moviebe/series'} />\r\n    }\r\n\r\n    if (pathname === '/moviebe/series') {\r\n        return <TemplatePageList items={series} loadingStatus={seriesLoadingStatus} />\r\n    }\r\n}\r\n\r\nexport default Series;","import { useState, useEffect } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\nimport changeUrlImage from '../../utils/changeUrlImage';\r\nimport Spinner from \"../spinner/Spinner\";\r\n\r\nimport 'swiper/css/lazy';\r\nimport './templateListItem.scss'\r\n\r\nconst TemplateListItem = ({ title, year, image, id, imDbRating }) => {\r\n    const [imageLoaded, setImageLoaded] = useState(false)\r\n    const [widthViewport, setWidthViewport] = useState(0);\r\n    const { pathname } = useLocation()\r\n    const changedImage = changeUrlImage(image);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"resize\", resizeHandler);\r\n        resizeHandler();\r\n        return () => {\r\n            window.removeEventListener(\"resize\", resizeHandler);\r\n        };\r\n    }, [])\r\n\r\n    const resizeHandler = () => {\r\n        setWidthViewport(window.innerWidth);\r\n    };\r\n\r\n    const handleImageLoaded = () => {\r\n        setImageLoaded(true)\r\n    };\r\n\r\n    const imageClass = classNames({\r\n        'template__image_loading': !imageLoaded\r\n    })\r\n\r\n    if (pathname === '/moviebe/' || pathname === `/moviebe/${id}`) {\r\n        return (\r\n            // to={`${widthViewport > 1024 ? `/moviebe/${id}` : ''}`}\r\n            <Link to={`/moviebe/${id}`}>\r\n                <div className='template__image' >\r\n                    <img\r\n                        className='swiper-lazy'\r\n                        data-srcset={changedImage}\r\n                        loading='lazy'\r\n                        alt='' />\r\n                    <div className='template__image__overlay'>\r\n                        <Link to={`/moviebe/${id}`}>\r\n                            <button className='template__image__btn'>watch</button>\r\n                        </Link>\r\n                        <span>\r\n                            <div className=\"template__image__rating\">IMDB: <span>{imDbRating}</span></div>\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"swiper-lazy-preloader swiper-lazy-preloader-white\"></div>\r\n                </div>\r\n\r\n                <h2 className=\"template__title\">{title}</h2>\r\n                <div className=\"template__year\">{year}</div>\r\n            </Link>\r\n        )\r\n    } else {\r\n        return (\r\n            <Link to={`/moviebe/${id}`}>\r\n                <div className='template__image'>\r\n                    <img className={`${imageClass}`} src={changedImage} alt=\"movies\" onLoad={handleImageLoaded} />\r\n                    <div className='template__image__overlay'>\r\n                        <Link to={`/moviebe/${id}`}>\r\n                            <button className='template__image__btn'>watch</button>\r\n                        </Link>\r\n                        <span>\r\n                            <div className=\"template__image__rating\">IMDB: <span>{imDbRating}</span></div>\r\n                        </span>\r\n                    </div>\r\n                    {\r\n                        !imageLoaded\r\n                            ? <Spinner />\r\n                            : null\r\n                    }\r\n                </div>\r\n\r\n                <h2 className=\"template__title\">{title}</h2>\r\n                <div className=\"template__year\">{year}</div>\r\n            </Link>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TemplateListItem;","import { Link } from 'react-router-dom';\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport { Keyboard, Navigation, Mousewheel, Lazy } from \"swiper\";\r\nimport TemplateListItem from '../templateListItem/TemplateListItem';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorIcon from '../../resources/img/icon/error.png';\r\n\r\nimport \"swiper/css\";\r\nimport './templateListSwiper.scss';\r\n\r\nconst TemplateListSwiper = ({ data, title, loadingStatus, linkPage, withoutLink }) => {\r\n\r\n    if (loadingStatus === 'loading') {\r\n        return (\r\n            <div className=\"template-swiper\">\r\n                <h2 className=\"title\">\r\n                    {title}\r\n                </h2>\r\n                <div className=\"spinner\">\r\n                    <Spinner />\r\n                </div>\r\n            </div>\r\n        )\r\n    } else if (loadingStatus === 'error') {\r\n        return (\r\n            <div className=\"template-swiper\">\r\n                <h2 className=\"title\">\r\n                    {title}\r\n                </h2>\r\n                <div className=\"eror\">\r\n                    <img src={ErrorIcon} alt=\"\" />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderTemplateList = (arr) => {\r\n        return arr.map(({ id, ...props }, index) => {\r\n            if (index <= 30) {\r\n                return (\r\n                    <SwiperSlide className=\"template__item\" key={id}>\r\n                        <TemplateListItem {...props} id={id} />\r\n                    </SwiperSlide>\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    const elements = renderTemplateList(data)\r\n\r\n    return (\r\n        <div className=\"template-swiper\">\r\n            {withoutLink ?\r\n                <h2 className=\"title\">\r\n                    {title}\r\n                </h2>\r\n                :\r\n                <h2 className=\"title\">\r\n                    {title} <Link to={linkPage}>see more...</Link>\r\n                </h2>\r\n            }\r\n            <Swiper\r\n                modules={[Navigation, Mousewheel, Keyboard, Lazy]}\r\n                lazy={true}\r\n                pagination={{\r\n                    clickable: true,\r\n                }}\r\n                slidesPerView={2}\r\n                spaceBetween={5}\r\n                navigation={true}\r\n                mousewheel={true}\r\n                keyboard={true}\r\n                breakpoints={{\r\n                    576: {\r\n                        slidesPerView: 3,\r\n                    },\r\n                    768: {\r\n                        slidesPerView: 4,\r\n                        spaceBetween: 15,\r\n                    },\r\n                    991: {\r\n                        slidesPerView: 5,\r\n                        spaceBetween: 15,\r\n\r\n                    },\r\n                    1140: {\r\n                        slidesPerView: 6,\r\n                        spaceBetween: 15,\r\n                    },\r\n                }}\r\n                className=\"mySwiper\">\r\n                {elements}\r\n            </Swiper>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TemplateListSwiper","import { useEffect, useState } from \"react\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport TemplateListItem from \"../templateListItem/TemplateListItem\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorIcon from '../../resources/img/icon/error.png';\r\n\r\nimport './templatePageList.scss';\r\n\r\nconst Items = ({ currentItems }) => {\r\n    const renderItems = (arr) => {\r\n        return arr.map(({ id, ...props }, index) => {\r\n            if (index <= 50) {\r\n                return (\r\n                    <div className=\"template__item\" key={id}>\r\n                        <TemplateListItem {...props} id={id} />\r\n                    </div>\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    const elements = renderItems(currentItems)\r\n\r\n    return (\r\n        <div className=\"template-page__wrapper\">\r\n            {elements}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst TemplatePageList = ({ items, loadingStatus }) => {\r\n\r\n    const [currentItems, setCurrentItems] = useState([]);\r\n    const [pageCount, setPageCount] = useState(0);\r\n    const [itemOffset, setItemOffset] = useState(0);\r\n\r\n    const itemsPerPage = 48;\r\n\r\n    useEffect(() => {\r\n        changePage();\r\n    }, [items])\r\n\r\n    useEffect(() => {\r\n        changePage();\r\n        window.scrollTo(0, 0);\r\n    }, [itemOffset, itemsPerPage]);\r\n\r\n    if (loadingStatus === 'loading') {\r\n        return (\r\n            <div className=\"spinner spinner-page\">\r\n                <Spinner />\r\n            </div>\r\n        )\r\n    } else if (loadingStatus === 'error') {\r\n        return (\r\n            <div className=\"error error-page\">\r\n                <img src={ErrorIcon} alt=\"\" />\r\n                Error\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const changePage = () => {\r\n        const endOffset = itemOffset + itemsPerPage;\r\n        setCurrentItems(items.slice(itemOffset, endOffset));\r\n        setPageCount(Math.ceil(items.length / itemsPerPage));\r\n    }\r\n\r\n    const handlePageClick = (event) => {\r\n        const newOffset = event.selected * itemsPerPage % items.length;\r\n        setItemOffset(newOffset);\r\n    };\r\n\r\n    return (\r\n        <div className=\"template-page\">\r\n            <Items currentItems={currentItems} />\r\n            <div className=\"template-page__pagination-wrapper\">\r\n                <ReactPaginate\r\n                    nextLabel=\">\"\r\n                    onPageChange={handlePageClick}\r\n                    pageRangeDisplayed={3}\r\n                    marginPagesDisplayed={2}\r\n                    pageCount={pageCount}\r\n                    previousLabel=\"<\"\r\n                    pageClassName=\"page-item\"\r\n                    pageLinkClassName=\"page-link\"\r\n                    previousClassName=\"page-item\"\r\n                    previousLinkClassName=\"page-link\"\r\n                    nextClassName=\"page-item\"\r\n                    nextLinkClassName=\"page-link\"\r\n                    breakLabel=\"...\"\r\n                    breakClassName=\"page-item\"\r\n                    breakLinkClassName=\"page-link\"\r\n                    containerClassName=\"pagination\"\r\n                    activeClassName=\"page-item_active\"\r\n                    renderOnZeroPageCount={null}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default TemplatePageList;\r\n","const changeUrlImage = (url) => {\r\n    const endIndex = url.indexOf('._');\r\n    const changedUrl = `${url.slice(0, endIndex)}._V1_Ratio0.6716_AL_.jpg`;\r\n    \r\n    return changedUrl\r\n}\r\n\r\nexport default changeUrlImage"],"names":["pathname","useLocation","useSelector","state","comingSoon","comingSoonLoadingStatus","dispatch","useDispatch","useEffect","fetchComingSoon","data","title","loadingStatus","linkPage","items","id","year","plot","image","imDbRating","metacriticRating","index","useState","imageLoaded","setImageLoaded","widthViewport","setWidthViewport","window","addEventListener","resizeHandler","removeEventListener","innerWidth","imageClass","classNames","itemSizeClass","changedImage","changeUrlImage","className","src","alt","onLoad","Spinner","to","inTheaters","inTheatersLoadingStatus","ErrorIcon","elements","arr","amountMovie","map","props","renderList","fetchInTheaters","TemplatePageList","movies","moviesLoadingStatus","fetchMovies","promo","promoLoadingStatus","element","min","max","length","Math","floor","random","fullTitle","renderPromo","BackgroundImg","InTheaters","ComingSoon","Movies","Series","series","seriesLoadingStatus","fetchSeries","loading","withoutLink","TemplateListItem","modules","Navigation","Mousewheel","Keyboard","Lazy","lazy","pagination","clickable","slidesPerView","spaceBetween","navigation","mousewheel","keyboard","breakpoints","Items","currentItems","setCurrentItems","pageCount","setPageCount","itemOffset","setItemOffset","changePage","scrollTo","endOffset","slice","ceil","nextLabel","onPageChange","event","newOffset","selected","pageRangeDisplayed","marginPagesDisplayed","previousLabel","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakLabel","breakClassName","breakLinkClassName","containerClassName","activeClassName","renderOnZeroPageCount","url","endIndex","indexOf"],"sourceRoot":""}