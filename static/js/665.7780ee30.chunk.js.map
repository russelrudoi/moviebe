{"version":3,"file":"static/js/665.7780ee30.chunk.js","mappings":"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","sources":["components/comingSoon/ComingSoon.js","components/inTheatersList/inTheatersListItem/InTheatersListItem.js","components/inTheatersList/InTheatersList.js","components/inTheaters/InTheaters.js","components/movies/Movies.js","components/promo/Promo.js","components/pages/MainPage.js","components/series/Series.js","components/templateListItem/TemplateListItem.js","components/templateListSwiper/TemplateListSwiper.js","components/templatePageList/TemplatePageList.js","utils/changeUrlImage.js"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useLocation } from \"react-router-dom\";\r\nimport TemplateListSwiper from \"../templateListSwiper/TemplateListSwiper\"\r\nimport TemplatePageList from \"../templatePageList/TemplatePageList\";\r\nimport { fetchComingSoon } from \"./comingSoonSlice\";\r\n\r\n\r\nconst ComingSoon = () => {\r\n    const { pathname } = useLocation()\r\n    const { comingSoon, comingSoonLoadingStatus } = useSelector(state => state.comingSoon);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchComingSoon())\r\n    }, [])\r\n\r\n    if (pathname === '/moviebe/') {\r\n        return <TemplateListSwiper\r\n            data={comingSoon}\r\n            title={'Coming Soon'}\r\n            loadingStatus={comingSoonLoadingStatus}\r\n            linkPage={'/moviebe/comingsoon'} />\r\n    }\r\n\r\n    if (pathname === '/moviebe/comingsoon') {\r\n        return <TemplatePageList items={comingSoon} loadingStatus={comingSoonLoadingStatus} />\r\n    }\r\n}\r\n\r\nexport default ComingSoon","import { useState } from 'react';\r\nimport classNames from \"classnames\";\r\nimport changeUrlImage from \"../../../utils/changeUrlImage\";\r\nimport Spinner from \"../../spinner/Spinner\";\r\n\r\nimport './inTheatersListItem.scss'\r\n\r\nconst InTheatersListItem = ({ title, year, plot, image, imDbRating, metacriticRating, index }) => {\r\n    const [imageLoaded, setImageLoaded] = useState(false);\r\n\r\n    const handleImageLoaded = () => {\r\n        setImageLoaded(true)\r\n    };\r\n\r\n    const imageClass = classNames({\r\n        'in-theaters__image_loading': !imageLoaded\r\n    })\r\n\r\n    const itemSizeClass = classNames(\r\n        'in-theaters__item',\r\n        { 'in-theaters__big': index === 0 },\r\n        { 'in-theaters__small': index === 1 },\r\n        { 'in-theaters__small second': index === 2 }\r\n    )\r\n\r\n    const changedImage = changeUrlImage(image)\r\n\r\n    return (\r\n        <div className={itemSizeClass}>\r\n            <img\r\n                className={`${imageClass}`}\r\n                src={changedImage}\r\n                alt=\"in theaters\"\r\n                onLoad={handleImageLoaded} />\r\n            {\r\n                !imageLoaded\r\n                    ? <Spinner />\r\n                    : null\r\n            }\r\n            <div className=\"in-theaters__info\">\r\n                <h2 className=\"in-theaters__title\">{title}</h2>\r\n                <div className=\"in-theaters__year\">{year}</div>\r\n                <p className=\"in-theaters__plot\">{plot}</p>\r\n                <div className=\"in-theaters__ratings\">\r\n                    <div className=\"in-theaters__ratings-name\">\r\n                        IMDB:<span>{imDbRating}</span>\r\n                    </div>\r\n                    <div className=\"in-theaters__ratings-name\">\r\n                        MC:<span>{metacriticRating}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <button className=\"btn in-theaters__btn-watch\">\r\n                watch\r\n            </button>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default InTheatersListItem","import { Link } from 'react-router-dom';\r\nimport InTheatersListItem from './inTheatersListItem/InTheatersListItem';\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorIcon from '../../resources/img/icon/error.png';\r\n\r\nimport '../../style/style.scss';\r\nimport './inTheatersList.scss';\r\n\r\nconst InTheatersList = ({inTheaters, inTheatersLoadingStatus}) => {\r\n\r\n    if (inTheatersLoadingStatus === 'loading') {\r\n        return (\r\n            <div className=\"in-theaters\">\r\n                <div className=\"container\">\r\n                    <h2 className=\"title\">In theaters</h2>\r\n                    <div className=\"spinner\">\r\n                        <Spinner />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else if (inTheatersLoadingStatus === 'error') {\r\n        return (\r\n            <div className=\"in-theaters\">\r\n                <div className=\"container\">\r\n                    <h2 className=\"title\">In theaters</h2>\r\n                    <div className=\"error\">\r\n                        <img src={ErrorIcon} alt=\"\" />\r\n                        Error\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderList = (arr) => {\r\n        return arr.map(({ id, ...props }, index) => {\r\n            if (index < 3) {\r\n                return (\r\n                    <InTheatersListItem\r\n                        key={id}\r\n                        index={index}\r\n                        {...props}\r\n                    />\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    const elements = renderList(inTheaters)\r\n\r\n    return (\r\n        <div className=\"in-theaters\">\r\n            <div className=\"container\">\r\n                <h2 className=\"title\">In theaters <Link to='/moviebe/intheatre'>see more...</Link></h2>\r\n                <div className=\"in-theaters__wrapper\">\r\n                    {elements}\r\n                    <button className=\"btn in-theaters__btn-link\">see more</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InTheatersList;","import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { fetchInTheaters } from './inTheatersSlice';\r\nimport InTheatersList from '../inTheatersList/InTheatersList';\r\nimport TemplatePageList from \"../templatePageList/TemplatePageList\";\r\n\r\nconst InTheaters = () => {\r\n    const { pathname } = useLocation();\r\n    const { inTheaters, inTheatersLoadingStatus } = useSelector(state => state.inTheaters)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchInTheaters());\r\n    }, [])\r\n\r\n    if (pathname === '/moviebe/') {\r\n        return <InTheatersList\r\n            inTheaters={inTheaters}\r\n            inTheatersLoadingStatus={inTheatersLoadingStatus}\r\n        />\r\n    }\r\n\r\n    if (pathname === '/moviebe/intheaters') {\r\n        return <TemplatePageList items={inTheaters} inTheatersLoadingStatus={inTheatersLoadingStatus} />\r\n    }\r\n}\r\n\r\nexport default InTheaters","import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation } from 'react-router-dom';\r\nimport TemplateListSwiper from '../templateListSwiper/TemplateListSwiper';\r\nimport TemplatePageList from '../templatePageList/TemplatePageList';\r\n\r\nimport { fetchMovies } from './moviesSlice';\r\n\r\nconst Movies = () => {\r\n    const { pathname } = useLocation()\r\n    const { movies, moviesLoadingStatus } = useSelector(state => state.movies)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchMovies());\r\n    }, [])\r\n\r\n    if (pathname === '/moviebe/') {\r\n        return <TemplateListSwiper\r\n            data={movies}\r\n            title={'Movies'}\r\n            loadingStatus={moviesLoadingStatus}\r\n            linkPage={'/moviebe/movies'} />\r\n\r\n    }\r\n\r\n    if (pathname === '/moviebe/movies') {\r\n        return <TemplatePageList items={movies} loadingStatus={moviesLoadingStatus} />\r\n    }\r\n}\r\n\r\nexport default Movies;","import { useSelector } from 'react-redux';\r\nimport changeUrlImage from '../../utils/changeUrlImage';\r\n\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorIcon from '../../resources/img/icon/error.png';\r\n\r\nimport './promo.scss'\r\n\r\nconst Promo = () => {\r\n    const { inTheaters: promo, inTheatersLoadingStatus: promoLoadingStatus } = useSelector(state => state.inTheaters);\r\n\r\n    if (promoLoadingStatus === 'loading') {\r\n        return (\r\n            <div className=\"promo\">\r\n                <div className=\"spinner\">\r\n                    <Spinner />\r\n                </div>\r\n                <div className=\"promo__bg\"></div>\r\n            </div>\r\n        )\r\n    } else if (promoLoadingStatus === 'error') {\r\n        return (\r\n            <div className=\"promo\">\r\n                <div className=\"error\">\r\n                    <img src={ErrorIcon} alt=\"\" />\r\n                    Error\r\n                </div>\r\n                <div className=\"promo__bg\"></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderPromo = (arr) => {\r\n        const random = (min, max) => {\r\n            return Math.floor(Math.random() * (max - min + 1)) + min;\r\n        }\r\n\r\n        if (arr.length) {\r\n            const { title, fullTitle, plot, imDbRating, metacriticRating, image } = arr[random(3, arr.length)]\r\n\r\n            return (\r\n                <div className=\"container inner_wrapper\">\r\n                    <div className=\"promo__info\">\r\n                        <h1 className=\"promo__title\">{title}</h1>\r\n                        <div className=\"promo__original-title\">{fullTitle}</div>\r\n                        <p className=\"promo__description\">\r\n                            {plot}\r\n                        </p>\r\n                        <div className=\"promo__ratings\">\r\n                            <div className=\"promo__ratings-name\">\r\n                                IMDB:<span>{imDbRating}</span>\r\n                            </div>\r\n                            <div className=\"promo__ratings-name\">\r\n                                MC:<span>{metacriticRating}</span>\r\n                            </div>\r\n                        </div>\r\n                        <button className=\"btn promo__btn\">more details</button>\r\n                    </div>\r\n                    <div className=\"promo__img\">\r\n                        <img src={changeUrlImage(image)} alt=\"movies\" />\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    const element = renderPromo(promo)\r\n\r\n    return (\r\n        <div className=\"promo\">\r\n            {element}\r\n            <div className=\"promo__bg\"></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Promo","import Promo from '../promo/Promo';\r\nimport InTheaters from '../inTheaters/InTheaters';\r\nimport ComingSoon from '../comingSoon/ComingSoon';\r\nimport Movies from '../movies/Movies';\r\nimport Series from '../series/Series';\r\n\r\nconst MainPage = () => {\r\n    return (\r\n        <>\r\n            <Promo />\r\n            <InTheaters />\r\n            <ComingSoon />\r\n            <Movies />\r\n            <Series />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage","import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { fetchSeries } from \"./seriesSlice\";\r\n\r\nimport TemplateListSwiper from \"../templateListSwiper/TemplateListSwiper\"\r\nimport TemplatePageList from \"../templatePageList/TemplatePageList\";\r\n\r\nconst Series = () => {\r\n    const { pathname } = useLocation()\r\n    const { series, seriesLoadingStatus } = useSelector(state => state.series);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchSeries())\r\n    }, [])\r\n\r\n    if (pathname === '/moviebe/') {\r\n        return <TemplateListSwiper\r\n            data={series}\r\n            title={'Series'}\r\n            loadingStatus={seriesLoadingStatus}\r\n            linkPage={'/moviebe/series'} />\r\n    }\r\n\r\n    if (pathname === '/moviebe/series') {\r\n        return <TemplatePageList items={series} loadingStatus={seriesLoadingStatus} />\r\n    }\r\n}\r\n\r\nexport default Series;","import { useState } from 'react';\r\nimport classNames from 'classnames';\r\nimport changeUrlImage from '../../utils/changeUrlImage'\r\nimport Spinner from \"../spinner/Spinner\";\r\n\r\nimport './templateListItem.scss'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst TemplateListItem = ({ title, year, image, id }) => {\r\n    const [imageLoaded, setImageLoaded] = useState(false)\r\n    const changedImage = changeUrlImage(image)\r\n\r\n    const handleImageLoaded = () => {\r\n        setImageLoaded(true)\r\n    };\r\n\r\n    const imageClass = classNames({\r\n        'template__image_loading': !imageLoaded\r\n    })\r\n\r\n    const handleClick = () => {\r\n        console.log(title, year, id)\r\n    }\r\n\r\n    return (\r\n        <Link to={`/moviebe/${id}`} onClick={handleClick}>\r\n            <div className='template__image'>\r\n                <img className={`${imageClass}`} src={changedImage} alt=\"movies\" onLoad={handleImageLoaded} />\r\n                <button className='template__image__btn'>watch</button>\r\n                {\r\n                    !imageLoaded\r\n                        ? <Spinner />\r\n                        : null\r\n                }\r\n                <div className={`template__image_overlay ${imageClass}`}></div>\r\n            </div>\r\n\r\n            <h2 className=\"template__title\">{title}</h2>\r\n            <div className=\"template__year\">({year})</div>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default TemplateListItem;","import TemplateListItem from '../templateListItem/TemplateListItem';\r\nimport { Link } from 'react-router-dom';\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport { Keyboard, Navigation, Mousewheel } from \"swiper\";\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorIcon from '../../resources/img/icon/error.png';\r\n\r\nimport \"swiper/css\";\r\nimport './templateListSwiper.scss';\r\n\r\nconst TemplateListSwiper = ({ data, title, loadingStatus, linkPage }) => {\r\n\r\n    if (loadingStatus === 'loading') {\r\n        return (\r\n            <div className=\"template-swiper\">\r\n                <div className=\"container\">\r\n                    <h2 className=\"title\">\r\n                        {title}\r\n                    </h2>\r\n                    <div className=\"spinner\">\r\n                        <Spinner />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else if (loadingStatus === 'error') {\r\n        return (\r\n            <div className=\"template-swiper\">\r\n                <div className=\"container\">\r\n                    <h2 className=\"title\">\r\n                        {title}\r\n                    </h2>\r\n                    <div className=\"eror\">\r\n                        <img src={ErrorIcon} alt=\"\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderTemplateList = (arr) => {\r\n        return arr.map(({ id, ...props }, index) => {\r\n            if (index <= 30) {\r\n                return (\r\n                    <SwiperSlide className=\"template__item\" key={id}>\r\n                        <TemplateListItem {...props} id={id}/>\r\n                    </SwiperSlide>\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    const elements = renderTemplateList(data)\r\n\r\n    return (\r\n        <div className=\"template-swiper\">\r\n            <div className=\"container\">\r\n                <h2 className=\"title\">\r\n                    {title} <Link to={linkPage}>see more...</Link>\r\n                </h2>\r\n                <Swiper\r\n                    modules={[Navigation, Mousewheel, Keyboard]}\r\n                    pagination={{\r\n                        clickable: true,\r\n                    }}\r\n                    slidesPerView={6}\r\n                    spaceBetween={15}\r\n                    navigation={true}\r\n                    mousewheel={true}\r\n                    keyboard={true}\r\n                    className=\"mySwiper\">\r\n                    {elements}\r\n                </Swiper>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TemplateListSwiper","import { useEffect, useState } from \"react\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport TemplateListItem from \"../templateListItem/TemplateListItem\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorIcon from '../../resources/img/icon/error.png';\r\n\r\nimport './templatePageList.scss';\r\n\r\nconst Items = ({ currentItems }) => {\r\n    const renderItems = (arr) => {\r\n        return arr.map(({ id, ...props }, index) => {\r\n            if (index <= 50) {\r\n                return (\r\n                    <div className=\"template__item\" key={id}>\r\n                        <TemplateListItem {...props} id={id}/>\r\n                    </div>\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    const elements = renderItems(currentItems)\r\n\r\n    return (\r\n        <div className=\"template-page__wrapper\">\r\n            {elements}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst TemplatePageList = ({ items, loadingStatus }) => {\r\n\r\n    const [currentItems, setCurrentItems] = useState([]);\r\n    const [pageCount, setPageCount] = useState(0);\r\n    const [itemOffset, setItemOffset] = useState(0);\r\n\r\n    const itemsPerPage = 48;\r\n\r\n    useEffect(() => {\r\n        changePage();\r\n    }, [items])\r\n\r\n    useEffect(() => {\r\n        changePage();\r\n        window.scrollTo(0, 0);\r\n    }, [itemOffset, itemsPerPage]);\r\n\r\n    if (loadingStatus === 'loading') {\r\n        return (\r\n            <div className=\"spinner spinner-page\">\r\n                <Spinner />\r\n            </div>\r\n        )\r\n    } else if (loadingStatus === 'error') {\r\n        return (\r\n            <div className=\"error error-page\">\r\n                <img src={ErrorIcon} alt=\"\" />\r\n                Error\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const changePage = () => {\r\n        const endOffset = itemOffset + itemsPerPage;\r\n        setCurrentItems(items.slice(itemOffset, endOffset));\r\n        setPageCount(Math.ceil(items.length / itemsPerPage));\r\n    }\r\n\r\n    const handlePageClick = (event) => {\r\n        const newOffset = event.selected * itemsPerPage % items.length;\r\n        setItemOffset(newOffset);\r\n    };\r\n\r\n    return (\r\n        <div className=\"template-page\">\r\n            <div className=\"container\">\r\n                <Items currentItems={currentItems} />\r\n                <div className=\"template-page__pagination-wrapper\">\r\n                    <ReactPaginate\r\n                        nextLabel=\">\"\r\n                        onPageChange={handlePageClick}\r\n                        pageRangeDisplayed={3}\r\n                        marginPagesDisplayed={2}\r\n                        pageCount={pageCount}\r\n                        previousLabel=\"<\"\r\n                        pageClassName=\"page-item\"\r\n                        pageLinkClassName=\"page-link\"\r\n                        previousClassName=\"page-item\"\r\n                        previousLinkClassName=\"page-link\"\r\n                        nextClassName=\"page-item\"\r\n                        nextLinkClassName=\"page-link\"\r\n                        breakLabel=\"...\"\r\n                        breakClassName=\"page-item\"\r\n                        breakLinkClassName=\"page-link\"\r\n                        containerClassName=\"pagination\"\r\n                        activeClassName=\"page-item_active\"\r\n                        renderOnZeroPageCount={null}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default TemplatePageList;\r\n","const changeUrlImage = (url) => {\r\n    const endIndex = url.indexOf('._');\r\n    const changedUrl = `${url.slice(0, endIndex)}._V1_Ratio0.6716_AL_.jpg`;\r\n    \r\n    return changedUrl\r\n}\r\n\r\nexport default changeUrlImage"],"names":["pathname","useLocation","useSelector","state","comingSoon","comingSoonLoadingStatus","dispatch","useDispatch","useEffect","fetchComingSoon","data","title","loadingStatus","linkPage","items","year","plot","image","imDbRating","metacriticRating","index","useState","imageLoaded","setImageLoaded","imageClass","classNames","itemSizeClass","changedImage","changeUrlImage","className","src","alt","onLoad","Spinner","inTheaters","inTheatersLoadingStatus","ErrorIcon","elements","map","id","props","to","fetchInTheaters","TemplatePageList","movies","moviesLoadingStatus","fetchMovies","promo","promoLoadingStatus","element","arr","min","max","length","Math","floor","random","fullTitle","renderPromo","InTheaters","ComingSoon","Movies","Series","series","seriesLoadingStatus","fetchSeries","onClick","console","log","TemplateListItem","modules","Navigation","Mousewheel","Keyboard","pagination","clickable","slidesPerView","spaceBetween","navigation","mousewheel","keyboard","Items","currentItems","setCurrentItems","pageCount","setPageCount","itemOffset","setItemOffset","changePage","window","scrollTo","endOffset","slice","ceil","nextLabel","onPageChange","event","newOffset","selected","pageRangeDisplayed","marginPagesDisplayed","previousLabel","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakLabel","breakClassName","breakLinkClassName","containerClassName","activeClassName","renderOnZeroPageCount","url","endIndex","indexOf"],"sourceRoot":""}